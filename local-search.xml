<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025慕尼黑上海光博会</title>
    <link href="/2025/03/13/2025%E6%85%95%E5%B0%BC%E9%BB%91%E5%85%89%E5%8D%9A%E4%BC%9A/"/>
    <url>/2025/03/13/2025%E6%85%95%E5%B0%BC%E9%BB%91%E5%85%89%E5%8D%9A%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-慕尼黑上海光博会"><a href="#2025-慕尼黑上海光博会" class="headerlink" title="2025 慕尼黑上海光博会"></a>2025 慕尼黑上海光博会</h1><p>慕尼黑上海光博会齐聚国内外行业知名企业，展示完整产品链：从元器件到系统集成方案，包含中间环节。2025年正逢慕尼黑上海光博会20周年，2025年3月11日 至 13 日在上海新国际博览中心盛大举行。</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250313073447467.png" alt="image-20250313073447467"></p><p>和往年相比，多了光子及量子专区（所以相应的展示面积也增加了），而且今年的专业论坛中还有一期是专门的量子论坛。</p><p>不过这些都不是我所关心的，我主要还是想看下控制系统相关的。基本上都集中在 <code>N1</code> 和 <code>N2</code>。</p><p>这里记录了走马观花的一些信息。</p><h2 id="ScanLab"><a href="#ScanLab" class="headerlink" title="ScanLab"></a>ScanLab</h2><blockquote><p>网站：</p><p><a href="http://www.scanlab.com/">www.scanlab.com</a></p><p>公司介绍：</p><p>自1990年创建已来，SCANLAB生产制造用于激光束偏转和定位的高性能振镜电机及振镜扫描系统。通过精确移动反射镜和光学系统，我们的产品实现了对激光束的三维导向和定位。 基于每年安装的40,000多套扫描系统及解决方案，我们500位高素质、兢业的员工已经积累了丰富的专业技能。在这个坚实的基础上，SCANLAB确立了世界范围内在此市场上的领先地位,并成为对各种应用提供成功扫描解决方案的标志。</p><p>产品分类：</p><p>其他激光应用系统、各类材料激光加工系统、组件加工系统、激光增材制造、医学、光谱、显微镜和成像</p><p>应用领域：</p><p>公共事业、工具制造&#x2F;工程机械、电子&#x2F;电气&#x2F;半导体、汽车工程、化工&#x2F;制药行业&#x2F;医疗技术&#x2F;生物技术、环境、材料处理&#x2F;加工、精密器械、研究&#x2F;科研</p></blockquote><p>在激光的高精度控制方面，ScanLab 还是存在一定优势的，但是其主要还是专注于扫描等领域。可以给人了解的东西不是很多。</p><h2 id="北京金橙子科技股份有限公司"><a href="#北京金橙子科技股份有限公司" class="headerlink" title="北京金橙子科技股份有限公司"></a>北京金橙子科技股份有限公司</h2><blockquote><p>网站：</p><p><a href="https://www.bjjcz.cn/">https://www.bjjcz.cn/</a></p><p>公司介绍：</p><p>北京金橙子科技股份有限公司（股票代码688291）创立于2004年，专注于激光工业加工领域控制软件和系统的研发，是工信部认定的专精特新小巨人企业、北京市认定的专精特新“小巨人”企业、北京市科委认定的高新技术企业。 金橙子打造出了先进的光束传输与控制技术平台，在此平台上衍生出众多具有自主知识产权的产品，广泛应用于激光先进制造、量测与自动化等领域，包括：激光标刻控制系统、激光切割控制系统、激光焊接控制系统、海格力斯控制系统、3D打印系统、宙斯控制系统以及驱控一体扫描模组等多个系列产品。</p><p>产品分类：</p><p>激光加工系统</p><p>应用领域：</p><p>工具制造&#x2F;工程机械、电子&#x2F;电气&#x2F;半导体、汽车工程、航天&#x2F;航空</p></blockquote><p>这家公司之前咱会没有看到过，看产品来说已经比较完整了，后需研究下。</p><h2 id="深圳市优尔数控软件有限公司"><a href="#深圳市优尔数控软件有限公司" class="headerlink" title="深圳市优尔数控软件有限公司"></a>深圳市优尔数控软件有限公司</h2><blockquote><p>网站：</p><p><a href="http://www.ursoft100.com/">www.ursoft100.com</a></p><p>公司介绍：</p><p>深圳市优尔数控软件有限公司创立于2011年，为国家认定的高新技术企业，公司专注于“激光+”方面的软件研发。产品主要涵盖激光控制、运动控制、视觉定位与检测等方面。优尔始终秉持“差异化与创新”，“为客户创造更大价值”的理念,为客户专业提供激光行业整套系统解决方案。 公司所有产品均为自主研发，拥有完全的知识产权。产品稳定可靠，易学易用，功能强大。并建立了完善的售后服务体系，为客户提供最优质的、最全面的技术支持和维护服务。 公司主要软件产品： 切割类：玻璃切割(裂片)，玻璃振镜(3D)打孔，陶瓷旋切打孔，PCB&#x2F;FPC切割等 焊接类：准直焊接与振镜焊接(金属焊接，塑料焊接；锂电焊接，PACK线应用等</p><p>产品分类：</p><p>其他激光应用系统、激光加工系统</p><p>应用领域：</p><p>能源、工具制造&#x2F;工程机械、电子&#x2F;电气&#x2F;半导体、汽车工程、图像处理、印刷&#x2F;制图、数据&#x2F;信息技术、材料处理&#x2F;加工、精密器械、其他</p></blockquote><p>看了下，主要就是做视觉 + 激光焊接这块的，在角落的小展位上。</p><h2 id="固高科技股份有限公司"><a href="#固高科技股份有限公司" class="headerlink" title="固高科技股份有限公司"></a>固高科技股份有限公司</h2><blockquote><p>网站：</p><p><a href="https://www.googoltech.com.cn/">https://www.googoltech.com.cn/</a></p><p>公司介绍：</p><p>固高科技于1999年由香港科技大学的李泽湘、高秉强、吴宏三位机器人、微电子和运动控制领域的国际知名学者和专家所创办，是亚太地区首家拥有自主知识产权, 专业从事运动控制及智能制造核心技术研究与开发的高科技企业，是国内外全互联智能制造综合解决方案提供商之一。固高科技专注于运动控制、伺服驱动、多维感知、工业现场网络和工业软件五个方向的核心技术研究，通过深入的国内外合作、产学研相结合、积极培育系统集成商等创新的商业模式，将固高科技的运控技术及产品广泛应用于微电子、机器人、数控机床、电子加工、检测、印刷、包装及生产自动化等工业控制领域。</p><p>产品分类：</p><p>光学生产设备、光学测量系统、各类材料激光加工系统、激光加工系统、全息测试测量系统与部件、半自动化激光测试测量系统、光伏与再生能源、机器视觉集成、配件、板卡、光纤、光缆、光纤器件及设备、光纤应用加工与装配设备、应用、生物技术</p><p>应用领域：</p><p>能源、工具制造&#x2F;工程机械、电子&#x2F;电气&#x2F;半导体、汽车工程、航天&#x2F;航空、化工&#x2F;制药行业&#x2F;医疗技术&#x2F;生物技术、印刷&#x2F;制图、国防工业、研究&#x2F;科研</p></blockquote><p>固高今年带来的是他的 <code>gLink-II</code> 总线协议，还有高阶平滑算法。需要分析。</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250313080100657.png" alt="image-20250313080100657"></p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250313080250903.png" alt="image-20250313080250903"></p><h2 id="武汉威士登智能控制技术有限公司"><a href="#武汉威士登智能控制技术有限公司" class="headerlink" title="武汉威士登智能控制技术有限公司"></a>武汉威士登智能控制技术有限公司</h2><blockquote><p>网站：</p><p><a href="http://www.wisdomlaser.com/">www.wisdomlaser.com</a></p><p>公司介绍：</p><p>威士登-WISDOM是由一批专注于激光控制、CNC数控系统、运动控制、机器视觉、自动化软件领域专业人才创立的“国家级高新技术企业”，经过多年的技术创新与研发投入，公司一直保持高速发展，2021年至2024年度连续被评为中国光谷“瞪羚企业”。 威士登作为“专精特新”激光控制系统的领导者，自主研发的“WSD-E系列激光切割控制系统”、“WisCut系列激光切割软件”与“WisNest系列排版套料软件”深入应用于各个领域的终端用户，并得到用户的广泛认可与批量应用。其中，威士登自主研发的WSD-E10系列型钢三维激光切割软件系统市场占有率第一，引领了钢结构行业的激光加工革命。</p><p>产品分类：</p><p>系统整合、各类材料激光加工系统、激光加工系统</p><p>应用领域：</p><p>电子&#x2F;电气&#x2F;半导体、汽车工程、材料处理&#x2F;加工、精密器械</p></blockquote><p>威士登是基于 Bechhoff 做的二次开发，从功能角度来说非常的完整。需要好好分析下。</p><h2 id="嘉强（上海）智能科技股份公司"><a href="#嘉强（上海）智能科技股份公司" class="headerlink" title="嘉强（上海）智能科技股份公司"></a>嘉强（上海）智能科技股份公司</h2><blockquote><p>网站：</p><p><a href="http://www.empower.cn/">www.empower.cn</a></p><p>公司介绍：</p><p>Empower嘉强成立于2009年，专注于激光智造的赋能型平台企业。公司秉承“嘉言善行·庄敬自强”的宗旨，专业一站式为激光切割、钻孔、焊接、熔覆、淬火、表面处理、微加工，3D打印及增材制造和在线打标等应用，提供RayTools锐图（A+B) 软件+激光头产品子系统，RayKits镭工（K+N）套件+行业解决方案和RayService激光无忧（C+S）配件易损件+维保的线上线下51laser全栈快速本地化服务！ 公司基于自主可控的嘉强鸿xEOS边缘操作系统数字化转型底座，通过xEOS分布式开放平台边缘部署和xAPP个性化工艺之生态保护，持续为激光智造Ai赋能，并与合作伙伴们共赢未来！</p><p>产品分类：</p><p>激光加工系统</p><p>应用领域：</p><p>工具制造&#x2F;工程机械、汽车工程</p></blockquote><p>嘉强今年的干货不少，现在整个产品链都已经比较完整了，开始打造生态了。需要分析下。</p><h2 id="维宏股份"><a href="#维宏股份" class="headerlink" title="维宏股份"></a>维宏股份</h2><blockquote><p>网站：</p><p><a href="http://www.weihong.com.cn/">www.weihong.com.cn</a></p><p>公司介绍：</p><p>上海维宏电子科技股份有限公司（股票代码：300508）是一家专注于运动控制系统研发、销售和服务的高科技企业，以拥有自主知识产权的工业自动化控制技术为基础，快速为客户提供个性化的解决方案，实现企业价值与客户价值共同成长。如今，维宏品牌已经成长为数字化制造领域“中国智造”的卓越品牌之一。 以赋能中国制造业为荣耀，公司成立以来，致力于开发运动控制产品，不断开拓产品应用领域。目前，维宏运动控制系统已广泛应用于模具制造、金属切削、金属高光加工、3C玻璃精密加工、板式家具切割、实木雕刻、玻璃石材加工、激光加工、水射流加工等领域。</p><p>产品分类：</p><p>各类材料激光加工系统、激光加工系统</p><p>应用领域：</p><p>工具制造&#x2F;工程机械、汽车工程、航天&#x2F;航空、材料处理&#x2F;加工</p></blockquote><ul><li><p>四卡盘坡口激光管材切割系统</p><p>TU7800M四卡盘坡口激光管材切割系统是为管道、钢结构和重型机械行业设计的高效解决方案。该系统通过四卡盘技术，解决了传统双卡盘机床加工长零件时的抖动问题，并实现了零尾料加工，提高材料利用率。</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/21642406_1735868476702.jpg" alt="img"></p></li><li><p>H型钢三维五轴激光切割控制系统</p><p>H型钢三维五轴激光切割控制系统是专为解决钢构建筑行业中的高精度、复杂形状加工需求而设计的先进制造解决方案。该系统以其高功率激光器（超过12千瓦）、五轴联动机床结构和灵活的切割头设计，能够应对工字钢等材料的精确加工，包括腹板斜切、打孔、过焊孔切割等复杂操作。</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/57252636_1735868293254.jpg" alt="img"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数控</tag>
      
      <tag>CNC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openManus初体验</title>
    <link href="/2025/03/08/openManus%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2025/03/08/openManus%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenManus-初体验"><a href="#OpenManus-初体验" class="headerlink" title="OpenManus 初体验"></a>OpenManus 初体验</h1><p>前几天 Manus 突然火了，国内自媒体各种夸夸夸，国外一点没水花。从我个人角度来看，这玩意儿和前几年的 autoGPT 没啥本质上的区别，无法就是大模型底座 + 工具链优化，这也是今年智能体的一个大方向。</p><p>之前的 DeepResearch 就给大家上了一课，就是推理 + 工具，会产生新的化学反应。因为从某种程度上来说，推理模型的最大优势，其实在于自动生成合适的 Pompt，而高质量的 Prompt 对于模型能力而言非常重要。相当于你有优秀的程序员，但是配了一个拉胯的产品；而推理模型弥补了这个不足。当然这个只是从现象来看，实际的底层的技术架构是完全不同的：）</p><p>反正这个 Manus 在我个人看来，和之前的所谓全球首个 AI 程序员 Devin 什么的，没有什么特别的区别，当然这里不是贬低，团队还是做了很大的改进的，但是并没有重大的技术上的突破。所以眼瞅着 3 小时后开源平替 <a href="https://github.com/mannaandpoem/OpenManus?tab=readme-ov-file">OpenManus</a> 就出来了。仔细看了眼，这个不是 MetaGPT 那帮人整合了工具链套了个壳吗 （此处应有黑人问号）。</p><p>我们先来试用下，安装过程不复述了，比较简单。模型方面使用的是 DeepSeek-V3。</p><h1 id="1-评估算法的设计（初战失败，下次成功后再更新了）"><a href="#1-评估算法的设计（初战失败，下次成功后再更新了）" class="headerlink" title="1. 评估算法的设计（初战失败，下次成功后再更新了）"></a>1. 评估算法的设计（初战失败，下次成功后再更新了）</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>怎么 设计一个算法，可以评估如何设置参数才能适配机床，因为机床 硬件 伺服 和加工刀路都对其存在影响</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>可以看到 OpenManus 默认分成 30 个步骤，进行处理。</p><p>但是我这边试验到就几步就跪了，大概消耗的 tokens 如下：</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250308100751354.png" alt="image-20250308100751354"></p><p>下面是详细的记录信息：</p><h2 id="1-1-算法设计"><a href="#1-1-算法设计" class="headerlink" title="1.1 算法设计"></a>1.1 算法设计</h2><p>2025-03-08 09:43:07.405 | INFO     | app.agent.toolcall:think:53 - ✨ Manus’s thoughts: 要设计一个算法来评估如何设置参数以适配机床，我们需要考虑以下几个关键因素：</p><ol><li><strong>机床硬件特性</strong>：包括机床的刚性、精度、最大转速、最大进给速度等。</li><li><strong>伺服系统特性</strong>：包括伺服电机的响应速度、扭矩、加速度等。</li><li><strong>加工刀路</strong>：包括切削速度、进给速度、切削深度、刀具材料等。</li></ol><h3 id="算法设计步骤"><a href="#算法设计步骤" class="headerlink" title="算法设计步骤"></a>算法设计步骤</h3><ol><li><p><strong>数据收集</strong>：</p><ul><li>收集机床的硬件参数。</li><li>收集伺服系统的参数。</li><li>收集加工刀路的参数。</li></ul></li><li><p><strong>参数建模</strong>：</p><ul><li>建立数学模型来描述机床、伺服系统和加工刀路之间的关系。</li><li>使用机器学习或优化算法来拟合模型。</li></ul></li><li><p><strong>参数优化</strong>：</p><ul><li>使用优化算法（如遗传算法、粒子群优化等）来寻找最优参数设置。</li><li>考虑约束条件（如机床的最大转速、最大进给速度等）。</li></ul></li><li><p><strong>评估与验证</strong>：</p><ul><li>使用仿真工具或实际加工来验证参数设置的效果。</li><li>根据评估结果调整模型和参数。</li></ul></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是一个简单的Python代码示例，用于收集数据并进行初步的参数优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-comment"># 机床硬件参数</span><br>machine_rigidity = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 机床刚性</span><br>machine_precision = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># 机床精度</span><br><br><span class="hljs-comment"># 伺服系统参数</span><br>servo_response_time = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># 伺服响应时间</span><br>servo_torque = <span class="hljs-number">50</span>  <span class="hljs-comment"># 伺服扭矩</span><br><br><span class="hljs-comment"># 加工刀路参数</span><br>cutting_speed = <span class="hljs-number">200</span>  <span class="hljs-comment"># 切削速度</span><br>feed_rate = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># 进给速度</span><br>cutting_depth = <span class="hljs-number">0.5</span>  <span class="hljs-comment"># 切削深度</span><br><br><span class="hljs-comment"># 目标函数：最小化加工误差</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective_function</span>(<span class="hljs-params">params</span>):<br>    cutting_speed, feed_rate, cutting_depth = params<br>    <span class="hljs-comment"># 简单的误差模型</span><br>    error = (cutting_speed / machine_rigidity) + (feed_rate / servo_response_time) + (cutting_depth / machine_precision)<br>    <span class="hljs-keyword">return</span> error<br><br><span class="hljs-comment"># 约束条件</span><br>constraints = (<br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>] - <span class="hljs-number">100</span>&#125;,  <span class="hljs-comment"># 切削速度 &gt;= 100</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>] - <span class="hljs-number">0.05</span>&#125;,  <span class="hljs-comment"># 进给速度 &gt;= 0.05</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>] - <span class="hljs-number">0.1</span>&#125;    <span class="hljs-comment"># 切削深度 &gt;= 0.1</span><br>)<br><br><span class="hljs-comment"># 初始参数</span><br>initial_params = [cutting_speed, feed_rate, cutting_depth]<br><br><span class="hljs-comment"># 优化</span><br>result = minimize(objective_function, initial_params, constraints=constraints)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Optimal Parameters:&quot;</span>, result.x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minimum Error:&quot;</span>, result.fun)<br></code></pre></td></tr></table></figure><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><ol><li><strong>数据收集</strong>：收集更多的机床、伺服系统和加工刀路的数据。</li><li><strong>模型改进</strong>：使用更复杂的模型来描述系统。</li><li><strong>优化算法</strong>：尝试不同的优化算法以提高参数设置的准确性。</li><li><strong>验证</strong>：使用仿真工具或实际加工来验证参数设置的效果。</li></ol><p>如果需要进一步的信息或工具支持，请告诉我。</p><h2 id="1-2-算法优化"><a href="#1-2-算法优化" class="headerlink" title="1.2 算法优化"></a>1.2 算法优化</h2><p>2025-03-08 09:43:44.951 | INFO     | app.agent.toolcall:think:53 - ✨ Manus’s thoughts: To design an algorithm that evaluates how to set parameters to adapt to a machine tool, we need to consider the following key factors:</p><ol><li><strong>Machine Tool Hardware Characteristics</strong>: Including rigidity, precision, maximum speed, maximum feed rate, etc.</li><li><strong>Servo System Characteristics</strong>: Including response speed, torque, acceleration, etc.</li><li><strong>Tool Path</strong>: Including cutting speed, feed rate, cutting depth, tool material, etc.</li></ol><h3 id="Algorithm-Design-Steps"><a href="#Algorithm-Design-Steps" class="headerlink" title="Algorithm Design Steps"></a>Algorithm Design Steps</h3><ol><li><p><strong>Data Collection</strong>:</p><ul><li>Collect machine tool hardware parameters.</li><li>Collect servo system parameters.</li><li>Collect tool path parameters.</li></ul></li><li><p><strong>Parameter Modeling</strong>:</p><ul><li>Establish a mathematical model to describe the relationship between the machine tool, servo system, and tool path.</li><li>Use machine learning or optimization algorithms to fit the model.</li></ul></li><li><p><strong>Parameter Optimization</strong>:</p><ul><li>Use optimization algorithms (such as genetic algorithms, particle swarm optimization, etc.) to find the optimal parameter settings.</li><li>Consider constraints (such as the machine tool’s maximum speed, maximum feed rate, etc.).</li></ul></li><li><p><strong>Evaluation and Validation</strong>:</p><ul><li>Use simulation tools or actual machining to validate the parameter settings.</li><li>Adjust the model and parameters based on the evaluation results.</li></ul></li></ol><h3 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h3><p>Here is a simple Python code example for collecting data and performing initial parameter optimization:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-comment"># Machine tool hardware parameters</span><br>machine_rigidity = <span class="hljs-number">1000</span>  <span class="hljs-comment"># Machine rigidity</span><br>machine_precision = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># Machine precision</span><br><br><span class="hljs-comment"># Servo system parameters</span><br>servo_response_time = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Servo response time</span><br>servo_torque = <span class="hljs-number">50</span>  <span class="hljs-comment"># Servo torque</span><br><br><span class="hljs-comment"># Tool path parameters</span><br>cutting_speed = <span class="hljs-number">200</span>  <span class="hljs-comment"># Cutting speed</span><br>feed_rate = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Feed rate</span><br>cutting_depth = <span class="hljs-number">0.5</span>  <span class="hljs-comment"># Cutting depth</span><br><br><span class="hljs-comment"># Objective function: Minimize machining error</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective_function</span>(<span class="hljs-params">params</span>):<br>    cutting_speed, feed_rate, cutting_depth = params<br>    <span class="hljs-comment"># Simple error model</span><br>    error = (cutting_speed / machine_rigidity) + (feed_rate / servo_response_time) + (cutting_depth / machine_precision)<br>    <span class="hljs-keyword">return</span> error<br><br><span class="hljs-comment"># Constraints</span><br>constraints = (<br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>] - <span class="hljs-number">100</span>&#125;,  <span class="hljs-comment"># Cutting speed &gt;= 100</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>] - <span class="hljs-number">0.05</span>&#125;,  <span class="hljs-comment"># Feed rate &gt;= 0.05</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>] - <span class="hljs-number">0.1</span>&#125;    <span class="hljs-comment"># Cutting depth &gt;= 0.1</span><br>)<br><br><span class="hljs-comment"># Initial parameters</span><br>initial_params = [cutting_speed, feed_rate, cutting_depth]<br><br><span class="hljs-comment"># Optimization</span><br>result = minimize(objective_function, initial_params, constraints=constraints)<br><br><span class="hljs-comment"># Output results</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Optimal Parameters:&quot;</span>, result.x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minimum Error:&quot;</span>, result.fun)<br></code></pre></td></tr></table></figure><h3 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h3><ol><li><strong>Data Collection</strong>: Collect more data on machine tools, servo systems, and tool paths.</li><li><strong>Model Improvement</strong>: Use more complex models to describe the system.</li><li><strong>Optimization Algorithms</strong>: Try different optimization algorithms to improve the accuracy of parameter settings.</li><li><strong>Validation</strong>: Use simulation tools or actual machining to validate the parameter settings.</li></ol><h2 id="1-3-算法优化（已经开始无效重复了）"><a href="#1-3-算法优化（已经开始无效重复了）" class="headerlink" title="1.3 算法优化（已经开始无效重复了）"></a>1.3 算法优化（已经开始无效重复了）</h2><p>2025-03-08 09:44:14.491 | INFO     | app.agent.toolcall:think:53 - ✨ Manus’s thoughts: To design an algorithm that evaluates how to set parameters to adapt to a machine tool, we need to consider the following key factors:</p><ol><li><strong>Machine Tool Hardware Characteristics</strong>: Including rigidity, precision, maximum speed, maximum feed rate, etc.</li><li><strong>Servo System Characteristics</strong>: Including response speed, torque, acceleration, etc.</li><li><strong>Tool Path</strong>: Including cutting speed, feed rate, cutting depth, tool material, etc.</li></ol><h3 id="Algorithm-Design-Steps-1"><a href="#Algorithm-Design-Steps-1" class="headerlink" title="Algorithm Design Steps"></a>Algorithm Design Steps</h3><ol><li><p><strong>Data Collection</strong>:</p><ul><li>Collect machine tool hardware parameters.</li><li>Collect servo system parameters.</li><li>Collect tool path parameters.</li></ul></li><li><p><strong>Parameter Modeling</strong>:</p><ul><li>Establish a mathematical model to describe the relationship between the machine tool, servo system, and tool path.</li><li>Use machine learning or optimization algorithms to fit the model.</li></ul></li><li><p><strong>Parameter Optimization</strong>:</p><ul><li>Use optimization algorithms (such as genetic algorithms, particle swarm optimization, etc.) to find the optimal parameter settings.</li><li>Consider constraints (such as the machine tool’s maximum speed, maximum feed rate, etc.).</li></ul></li><li><p><strong>Evaluation and Validation</strong>:</p><ul><li>Use simulation tools or actual machining to validate the parameter settings.</li><li>Adjust the model and parameters based on the evaluation results.</li></ul></li></ol><h3 id="Example-Code-1"><a href="#Example-Code-1" class="headerlink" title="Example Code"></a>Example Code</h3><p>Here is a simple Python code example for collecting data and performing initial parameter optimization:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-comment"># Machine tool hardware parameters</span><br>machine_rigidity = <span class="hljs-number">1000</span>  <span class="hljs-comment"># Machine rigidity</span><br>machine_precision = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># Machine precision</span><br><br><span class="hljs-comment"># Servo system parameters</span><br>servo_response_time = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Servo response time</span><br>servo_torque = <span class="hljs-number">50</span>  <span class="hljs-comment"># Servo torque</span><br><br><span class="hljs-comment"># Tool path parameters</span><br>cutting_speed = <span class="hljs-number">200</span>  <span class="hljs-comment"># Cutting speed</span><br>feed_rate = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Feed rate</span><br>cutting_depth = <span class="hljs-number">0.5</span>  <span class="hljs-comment"># Cutting depth</span><br><br><span class="hljs-comment"># Objective function: Minimize machining error</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective_function</span>(<span class="hljs-params">params</span>):<br>    cutting_speed, feed_rate, cutting_depth = params<br>    <span class="hljs-comment"># Simple error model</span><br>    error = (cutting_speed / machine_rigidity) + (feed_rate / servo_response_time) + (cutting_depth / machine_precision)<br>    <span class="hljs-keyword">return</span> error<br><br><span class="hljs-comment"># Constraints</span><br>constraints = (<br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>] - <span class="hljs-number">100</span>&#125;,  <span class="hljs-comment"># Cutting speed &gt;= 100</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>] - <span class="hljs-number">0.05</span>&#125;,  <span class="hljs-comment"># Feed rate &gt;= 0.05</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>] - <span class="hljs-number">0.1</span>&#125;    <span class="hljs-comment"># Cutting depth &gt;= 0.1</span><br>)<br><br><span class="hljs-comment"># Initial parameters</span><br>initial_params = [cutting_speed, feed_rate, cutting_depth]<br><br><span class="hljs-comment"># Optimization</span><br>result = minimize(objective_function, initial_params, constraints=constraints)<br><br><span class="hljs-comment"># Output results</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Optimal Parameters:&quot;</span>, result.x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minimum Error:&quot;</span>, result.fun)<br></code></pre></td></tr></table></figure><h3 id="Next-Steps-1"><a href="#Next-Steps-1" class="headerlink" title="Next Steps"></a>Next Steps</h3><ol><li><strong>Data Collection</strong>: Collect more data on machine tools, servo systems, and tool paths.</li><li><strong>Model Improvement</strong>: Use more complex models to describe the system.</li><li><strong>Optimization Algorithms</strong>: Try different optimization algorithms to improve the accuracy of parameter settings.</li><li><strong>Validation</strong>: Use simulation tools or actual machining to validate the parameter settings.</li></ol><p>If you need further information or tool support, please let me know.</p><h2 id="1-4-算法优化（重复）"><a href="#1-4-算法优化（重复）" class="headerlink" title="1.4 算法优化（重复）"></a>1.4 算法优化（重复）</h2><p>2025-03-08 09:44:14.491 | INFO     | app.agent.toolcall:think:54 - 🛠️ Manus selected 0 tools to use<br>2025-03-08 09:44:14.492 | INFO     | app.agent.base:run:137 - Executing step 4&#x2F;30<br>2025-03-08 09:44:43.020 | INFO     | app.agent.toolcall:think:53 - ✨ Manus’s thoughts: To design an algorithm that evaluates how to set parameters to adapt to a machine tool, we need to consider the following key factors:</p><ol><li><strong>Machine Tool Hardware Characteristics</strong>: Including rigidity, precision, maximum speed, maximum feed rate, etc.</li><li><strong>Servo System Characteristics</strong>: Including response speed, torque, acceleration, etc.</li><li><strong>Tool Path</strong>: Including cutting speed, feed rate, cutting depth, tool material, etc.</li></ol><h3 id="Algorithm-Design-Steps-2"><a href="#Algorithm-Design-Steps-2" class="headerlink" title="Algorithm Design Steps"></a>Algorithm Design Steps</h3><ol><li><p><strong>Data Collection</strong>:</p><ul><li>Collect machine tool hardware parameters.</li><li>Collect servo system parameters.</li><li>Collect tool path parameters.</li></ul></li><li><p><strong>Parameter Modeling</strong>:</p><ul><li>Establish a mathematical model to describe the relationship between the machine tool, servo system, and tool path.</li><li>Use machine learning or optimization algorithms to fit the model.</li></ul></li><li><p><strong>Parameter Optimization</strong>:</p><ul><li>Use optimization algorithms (such as genetic algorithms, particle swarm optimization, etc.) to find the optimal parameter settings.</li><li>Consider constraints (such as the machine tool’s maximum speed, maximum feed rate, etc.).</li></ul></li><li><p><strong>Evaluation and Validation</strong>:</p><ul><li>Use simulation tools or actual machining to validate the parameter settings.</li><li>Adjust the model and parameters based on the evaluation results.</li></ul></li></ol><h3 id="Example-Code-2"><a href="#Example-Code-2" class="headerlink" title="Example Code"></a>Example Code</h3><p>Here is a simple Python code example for collecting data and performing initial parameter optimization:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-comment"># Machine tool hardware parameters</span><br>machine_rigidity = <span class="hljs-number">1000</span>  <span class="hljs-comment"># Machine rigidity</span><br>machine_precision = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># Machine precision</span><br><br><span class="hljs-comment"># Servo system parameters</span><br>servo_response_time = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Servo response time</span><br>servo_torque = <span class="hljs-number">50</span>  <span class="hljs-comment"># Servo torque</span><br><br><span class="hljs-comment"># Tool path parameters</span><br>cutting_speed = <span class="hljs-number">200</span>  <span class="hljs-comment"># Cutting speed</span><br>feed_rate = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Feed rate</span><br>cutting_depth = <span class="hljs-number">0.5</span>  <span class="hljs-comment"># Cutting depth</span><br><br><span class="hljs-comment"># Objective function: Minimize machining error</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective_function</span>(<span class="hljs-params">params</span>):<br>    cutting_speed, feed_rate, cutting_depth = params<br>    <span class="hljs-comment"># Simple error model</span><br>    error = (cutting_speed / machine_rigidity) + (feed_rate / servo_response_time) + (cutting_depth / machine_precision)<br>    <span class="hljs-keyword">return</span> error<br><br><span class="hljs-comment"># Constraints</span><br>constraints = (<br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>] - <span class="hljs-number">100</span>&#125;,  <span class="hljs-comment"># Cutting speed &gt;= 100</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>] - <span class="hljs-number">0.05</span>&#125;,  <span class="hljs-comment"># Feed rate &gt;= 0.05</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>] - <span class="hljs-number">0.1</span>&#125;    <span class="hljs-comment"># Cutting depth &gt;= 0.1</span><br>)<br><br><span class="hljs-comment"># Initial parameters</span><br>initial_params = [cutting_speed, feed_rate, cutting_depth]<br><br><span class="hljs-comment"># Optimization</span><br>result = minimize(objective_function, initial_params, constraints=constraints)<br><br><span class="hljs-comment"># Output results</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Optimal Parameters:&quot;</span>, result.x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minimum Error:&quot;</span>, result.fun)<br></code></pre></td></tr></table></figure><h3 id="Next-Steps-2"><a href="#Next-Steps-2" class="headerlink" title="Next Steps"></a>Next Steps</h3><ol><li><strong>Data Collection</strong>: Collect more data on machine tools, servo systems, and tool paths.</li><li><strong>Model Improvement</strong>: Use more complex models to describe the system.</li><li><strong>Optimization Algorithms</strong>: Try different optimization algorithms to improve the accuracy of parameter settings.</li><li><strong>Validation</strong>: Use simulation tools or actual machining to validate the parameter settings.</li></ol><p>If you need further information or tool support, please let me know.</p><h2 id="1-5-算法优化（重复）"><a href="#1-5-算法优化（重复）" class="headerlink" title="1.5 算法优化（重复）"></a>1.5 算法优化（重复）</h2><p>2025-03-08 09:44:43.020 | INFO     | app.agent.toolcall:think:54 - 🛠️ Manus selected 0 tools to use<br>2025-03-08 09:44:43.020 | WARNING  | app.agent.base:handle_stuck_state:163 - Agent detected stuck state. Added prompt:         Observed duplicate responses. Consider new strategies and avoid repeating ineffective paths already attempted.<br>2025-03-08 09:44:43.021 | INFO     | app.agent.base:run:137 - Executing step 5&#x2F;30<br>2025-03-08 09:45:11.795 | INFO     | app.agent.toolcall:think:53 - ✨ Manus’s thoughts: To design an algorithm that evaluates how to set parameters to adapt to a machine tool, we need to consider the following key factors:</p><ol><li><strong>Machine Tool Hardware Characteristics</strong>: Including rigidity, precision, maximum speed, maximum feed rate, etc.</li><li><strong>Servo System Characteristics</strong>: Including response speed, torque, acceleration, etc.</li><li><strong>Tool Path</strong>: Including cutting speed, feed rate, cutting depth, tool material, etc.</li></ol><h3 id="Algorithm-Design-Steps-3"><a href="#Algorithm-Design-Steps-3" class="headerlink" title="Algorithm Design Steps"></a>Algorithm Design Steps</h3><ol><li><p><strong>Data Collection</strong>:</p><ul><li>Collect machine tool hardware parameters.</li><li>Collect servo system parameters.</li><li>Collect tool path parameters.</li></ul></li><li><p><strong>Parameter Modeling</strong>:</p><ul><li>Establish a mathematical model to describe the relationship between the machine tool, servo system, and tool path.</li><li>Use machine learning or optimization algorithms to fit the model.</li></ul></li><li><p><strong>Parameter Optimization</strong>:</p><ul><li>Use optimization algorithms (such as genetic algorithms, particle swarm optimization, etc.) to find the optimal parameter settings.</li><li>Consider constraints (such as the machine tool’s maximum speed, maximum feed rate, etc.).</li></ul></li><li><p><strong>Evaluation and Validation</strong>:</p><ul><li>Use simulation tools or actual machining to validate the parameter settings.</li><li>Adjust the model and parameters based on the evaluation results.</li></ul></li></ol><h3 id="Example-Code-3"><a href="#Example-Code-3" class="headerlink" title="Example Code"></a>Example Code</h3><p>Here is a simple Python code example for collecting data and performing initial parameter optimization:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-comment"># Machine tool hardware parameters</span><br>machine_rigidity = <span class="hljs-number">1000</span>  <span class="hljs-comment"># Machine rigidity</span><br>machine_precision = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># Machine precision</span><br><br><span class="hljs-comment"># Servo system parameters</span><br>servo_response_time = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Servo response time</span><br>servo_torque = <span class="hljs-number">50</span>  <span class="hljs-comment"># Servo torque</span><br><br><span class="hljs-comment"># Tool path parameters</span><br>cutting_speed = <span class="hljs-number">200</span>  <span class="hljs-comment"># Cutting speed</span><br>feed_rate = <span class="hljs-number">0.1</span>  <span class="hljs-comment"># Feed rate</span><br>cutting_depth = <span class="hljs-number">0.5</span>  <span class="hljs-comment"># Cutting depth</span><br><br><span class="hljs-comment"># Objective function: Minimize machining error</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective_function</span>(<span class="hljs-params">params</span>):<br>    cutting_speed, feed_rate, cutting_depth = params<br>    <span class="hljs-comment"># Simple error model</span><br>    error = (cutting_speed / machine_rigidity) + (feed_rate / servo_response_time) + (cutting_depth / machine_precision)<br>    <span class="hljs-keyword">return</span> error<br><br><span class="hljs-comment"># Constraints</span><br>constraints = (<br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>] - <span class="hljs-number">100</span>&#125;,  <span class="hljs-comment"># Cutting speed &gt;= 100</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>] - <span class="hljs-number">0.05</span>&#125;,  <span class="hljs-comment"># Feed rate &gt;= 0.05</span><br>    &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">2</span>] - <span class="hljs-number">0.1</span>&#125;    <span class="hljs-comment"># Cutting depth &gt;= 0.1</span><br>)<br><br><span class="hljs-comment"># Initial parameters</span><br>initial_params = [cutting_speed, feed_rate, cutting_depth]<br><br><span class="hljs-comment"># Optimization</span><br>result = minimize(objective_function, initial_params, constraints=constraints)<br><br><span class="hljs-comment"># Output results</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Optimal Parameters:&quot;</span>, result.x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minimum Error:&quot;</span>, result.fun)<br></code></pre></td></tr></table></figure><h3 id="Next-Steps-3"><a href="#Next-Steps-3" class="headerlink" title="Next Steps"></a>Next Steps</h3><ol><li><strong>Data Collection</strong>: Collect more data on machine tools, servo systems, and tool paths.</li><li><strong>Model Improvement</strong>: Use more complex models to describe the system.</li><li><strong>Optimization Algorithms</strong>: Try different optimization algorithms to improve the accuracy of parameter settings.</li><li><strong>Validation</strong>: Use simulation tools or actual machining to validate the parameter settings.</li></ol><p>If you need further information or tool support, please let me know.</p><h2 id="1-6-1-13-尝试使用-python-执行，全部都失败了"><a href="#1-6-1-13-尝试使用-python-执行，全部都失败了" class="headerlink" title="1.6 ~ 1.13 尝试使用 python 执行，全部都失败了"></a>1.6 ~ 1.13 尝试使用 python 执行，全部都失败了</h2><p>日志就不记录了</p><h1 id="2-收集-lusipad-的信息，并且生成一个个人主页"><a href="#2-收集-lusipad-的信息，并且生成一个个人主页" class="headerlink" title="2 收集 lusipad 的信息，并且生成一个个人主页"></a>2 收集 lusipad 的信息，并且生成一个个人主页</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>收集lusipad的信息并为他编写个人主页，需要美观带图文信息</p><h2 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h2><h3 id="2-1-使用-google-search-信息"><a href="#2-1-使用-google-search-信息" class="headerlink" title="2.1 使用 google search 信息"></a>2.1 使用 google search 信息</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2025-03-09 13:08:02.197 | <span class="hljs-built_in">INFO</span>     | app.agent.toolcall:act:113 - 🎯<span class="hljs-built_in"> Tool </span><span class="hljs-string">&#x27;google_search&#x27;</span> completed its mission! Result: Observed output of cmd `google_search` executed:<br>[<span class="hljs-string">&#x27;/search?q=lusipad&#x27;</span>, <span class="hljs-string">&#x27;https://lusipad.com/&#x27;</span>, <span class="hljs-string">&#x27;https://github.com/lusipad&#x27;</span>, <span class="hljs-string">&#x27;https://lusipad.com/about/&#x27;</span>, <span class="hljs-string">&#x27;https://marketplace.visualstudio.com/publishers/lusipad&#x27;</span>, <span class="hljs-string">&#x27;https://gitee.com/lusipad/newbot.git&#x27;</span>, <span class="hljs-string">&#x27;https://github.com/lusipad/lusipad.github.io/blob/master/lua%E7%9A%84capi.html&#x27;</span>, <span class="hljs-string">&#x27;https://www.google.com/search?num=12&#x27;</span>, <span class="hljs-string">&#x27;https://app.opensauced.pizza/user/lusipad/card&#x27;</span>, <span class="hljs-string">&#x27;https://gitee.com/lusipad/watched?sort=watches.created_at+desc&#x27;</span>]<br></code></pre></td></tr></table></figure><p>这一步收集到了一些我的网站之类的信息</p><h3 id="2-2-打开浏览器"><a href="#2-2-打开浏览器" class="headerlink" title="2.2 打开浏览器"></a>2.2 打开浏览器</h3><p>发现没有浏览器后，尝试下载并且安装一个 chrome 浏览器</p><h3 id="2-3-下载和安装浏览器"><a href="#2-3-下载和安装浏览器" class="headerlink" title="2.3 下载和安装浏览器"></a>2.3 下载和安装浏览器</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">09</span> <span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">19</span>.<span class="hljs-number">523</span> | INFO     | app.agent.base:run:<span class="hljs-number">137</span> - Executing step <span class="hljs-number">3</span>/<span class="hljs-number">30</span><br><span class="hljs-attribute">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">09</span> <span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">27</span>.<span class="hljs-number">953</span> | INFO     | app.agent.toolcall:think:<span class="hljs-number">53</span> - ✨ Manus&#x27;s thoughts:<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">09</span> <span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">27</span>.<span class="hljs-number">953</span> | INFO     | app.agent.toolcall:think:<span class="hljs-number">54</span> - 🛠️ Manus selected <span class="hljs-number">1</span> tools to use<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">09</span> <span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">27</span>.<span class="hljs-number">953</span> | INFO     | app.agent.toolcall:think:<span class="hljs-number">58</span> - 🧰 Tools being prepared:<span class="hljs-meta"> [&#x27;python_execute&#x27;]</span><br><span class="hljs-attribute">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">09</span> <span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">27</span>.<span class="hljs-number">955</span> | INFO     | app.agent.toolcall:execute_tool:<span class="hljs-number">140</span> - 🔧 Activating tool: &#x27;python_execute&#x27;...<br><span class="hljs-attribute">Downloading</span> Chromium <span class="hljs-number">131</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6778</span>.<span class="hljs-number">33</span> (playwright build v1148) from https://playwright.azureedge.net/builds/chromium/<span class="hljs-number">1148</span>/chromium-win64.zip<br></code></pre></td></tr></table></figure><h3 id="2-4-尝试执行-python"><a href="#2-4-尝试执行-python" class="headerlink" title="2.4 尝试执行 python"></a>2.4 尝试执行 python</h3><p>但是没有找到 python</p><h3 id="2-5-又下载了火狐的浏览器"><a href="#2-5-又下载了火狐的浏览器" class="headerlink" title="2.5 又下载了火狐的浏览器"></a>2.5 又下载了火狐的浏览器</h3><h3 id="2-6-访问了-lusipad-com"><a href="#2-6-访问了-lusipad-com" class="headerlink" title="2.6 访问了 lusipad.com"></a>2.6 访问了 <code>lusipad.com</code></h3><h3 id="2-7-使用火狐下载了首页内容"><a href="#2-7-使用火狐下载了首页内容" class="headerlink" title="2.7 使用火狐下载了首页内容"></a>2.7 使用火狐下载了首页内容</h3><p>保存了一个 lusipad_homepage.txt 和 lusipad_homepage.html</p><p>似乎他认为这样就完成了。</p><p>检查了网页内容，无法打开；txt 就是把所有的主页的内容存储到了 txt 里。</p><p>从使用上来看，基于 browse_use 的一些常用功能已经被集成进来了，可惜整体智商堪忧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>manus</tag>
      
      <tag>智能体</tag>
      
      <tag>open_manus</tag>
      
      <tag>openManus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KTransformers 2.3 版本发布</title>
    <link href="/2025/03/06/ktransform-2-3/"/>
    <url>/2025/03/06/ktransform-2-3/</url>
    
    <content type="html"><![CDATA[<h1 id="KTransformers-2-3-版本发布"><a href="#KTransformers-2-3-版本发布" class="headerlink" title="KTransformers 2.3 版本发布"></a>KTransformers 2.3 版本发布</h1><p>KTransfomer 2.3 版本发布了，主要是增加了对 unsloth 1.58&#x2F;2.51 bits 权重的支持以及更长的上下文支持。</p><p>详细的内容包括：</p><ol><li><p>低精度推理优化 #754<br>  新增 IQ1_S&#x2F;IQ2_XXS 量化乘法支持，现已兼容 Unsloth DeepSeek-R1 1.58bit&#x2F;2.51bit 动态量化权重<br>  使用 DeepSeek-R1 混合精度模型（IQ1+FP8）提高模型表现，实测单卡显存占用 19GB，系统内存占用 140GB。混合精度模型（IQ1+FP8）MMLU 评测83.6 分，略高于全精度版 DeepSeek-V3，更多测试正在进行中，详情见 <a href="https://github.com/kvcache-ai/ktransformers/blob/main/doc/en/benchmark.md">https://github.com/kvcache-ai/ktransformers/blob/main/doc/en/benchmark.md</a></p></li><li><p>长上下文处理增强 #750<br>  实现 chunked prefill<br>  在 24GB 显存环境下支持 DeepSeek-R1 处理最高 139K tokens 长上下文。介于DeepSeek最高只支持到128K上下文，我们的长上下文优化将告一段落。</p></li></ol><p>V0.2.4 预告：<br>下一个版本将是 0.2 系列的最后一个子版本，将会迎来 ktransformers 从“玩具”到“实用”最关键的一个更新 – 多并发支持。</p><p>0.2.4 预计在两周内发布，后续将推进 0.3 版本的开发和发布，预计包括 AMX 等提升更高性能的优化，以及 AMD、XPU、摩尔、沐曦、昇腾等更多的显卡种类支持。</p><p>在之前我验证过 671B 的 2.51bit 版本，相对来说是一个可以接受的版本。从成本来说，240GB 内存 + 14GB 显存也是一个可以接受的范围。这次进一步降低了入门门槛，打算找个时间好好验证下，成本减低所带来的性能变化到底有多少。（5000 块整一套满血版不是梦哈）</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>ktransformers</tag>
      
      <tag>deepseek</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用AI开发数控系统记录</title>
    <link href="/2025/03/02/%E4%BD%BF%E7%94%A8AI%E5%BC%80%E5%8F%91%E6%95%B0%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/03/02/%E4%BD%BF%E7%94%A8AI%E5%BC%80%E5%8F%91%E6%95%B0%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-AI-开发数控系统记录"><a href="#使用-AI-开发数控系统记录" class="headerlink" title="使用 AI 开发数控系统记录"></a>使用 AI 开发数控系统记录</h1><p>在过去的一周中，使用闲暇时间，使用 AI 从零开始开发一个数控系统。主要是为了验证下现有的 AI 对于复杂系统的开发，同时也记录了整个过程中所遇到的坑。</p><p> <img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250302015222450.png" alt="image-20250302015222450"></p><p>本次开发主要使用的 AI 工具为 Trae （字节出品，可免费使用 GPT4 和 Claude-3.5-Sonnet），Windsurf（15 刀的 Pro 版，包括 500 次 Chat 和 1500 次 Flow，不管是查看文件、执行命令还是改写代码都算一次 Flow，模型方面主要使用的是 Claude-3.7-sonnet）</p><p>前期用的 Trae，后期随着项目规模扩大，Trae 无法胜任后，换成了 WindSurf</p><p>在具体的开发中，也尽量按照：先计划、后开发；使用 TDD 的方式，测试和开发交替进行。</p><p>项目地址：<a href="https://github.com/lusipad/XXCNC">lusipad&#x2F;XXCNC: 一个用来验证一些想法的简单原型项目，主要由AI进行编写</a></p><h2 id="1-需求沟通"><a href="#1-需求沟通" class="headerlink" title="1. 需求沟通"></a>1. 需求沟通</h2><h3 id="1-1-确定高层需求"><a href="#1-1-确定高层需求" class="headerlink" title="1.1 确定高层需求"></a>1.1 确定高层需求</h3><p>第一步先和 AI 进行了详细的沟通，我提出了自己的诉求</p><blockquote><p>Me: 我想开发一个数控系统，我们来聊下应该怎么设计吧</p><p>AI：让我们来讨论数控系统的设计。数控系统是一个复杂的实时控制系统，需要考虑多个关键方面：</p><ol><li><p><strong>系统架构</strong></p><ul><li>实时控制层：负责底层运动控制、插补运算</li><li>逻辑控制层：处理 PLC 逻辑、IO 控制</li><li>应用层：用户界面、加工程序管理等</li></ul></li><li><p><strong>核心功能模块</strong></p><ul><li>运动控制模块<ul><li>轴控制</li><li>插补算法（直线、圆弧等）</li><li>加减速控制</li></ul></li><li>G代码解析器</li><li>刀具管理</li><li>工件坐标系统</li><li>人机界面（HMI）</li></ul></li><li><p><strong>技术选型建议</strong></p><ul><li>实时控制层：C&#x2F;C++（保证实时性）</li><li>逻辑控制：可以考虑 C++ 或工业控制专用语言</li><li>界面层：Qt&#x2F;WPF 等现代 GUI 框架</li></ul></li><li><p><strong>关键技术点</strong></p><ul><li>实时性保证</li><li>运动控制算法</li><li>安全机制</li><li>误差补偿</li></ul></li></ol><p>您想先从哪个方面开始深入讨论？或者您对某个具体模块有特别的需求或疑问吗？</p></blockquote><h3 id="1-2-确定技术栈、具体的功模块划分"><a href="#1-2-确定技术栈、具体的功模块划分" class="headerlink" title="1.2 确定技术栈、具体的功模块划分"></a>1.2 确定技术栈、具体的功模块划分</h3><blockquote><p>Me：技术方面我决定使用C++，所以模块我们如何划分</p><p>AI：基于C++开发数控系统，我建议按以下方式进行模块划分：</p><ol><li>核心控制模块（Core）</li><li>运动控制模块（Motion）</li><li>插补引擎模块（Interpolation）</li><li>G代码解析模块（GCode）</li><li>HMI界面模块（UI）</li><li>配置管理模块（Config）</li><li>诊断和日志模块（Diagnostic）<br>建议的项目结构：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">d:\Repos\XXCNC\<br>├── src/<br>│   ├── Core/           // 核心控制模块<br>│   ├── Motion/         // 运动控制模块<br>│   ├── Interpolation/  // 插补引擎模块<br>│   ├── GCode/         // G代码解析模块<br>│   ├── UI/            // 用户界面模块<br>│   ├── Config/        // 配置管理模块<br>│   └── Diagnostic/    // 诊断和日志模块<br>├── include/           // 公共头文件<br>├── lib/              // 第三方库<br>└── tests/            // 单元测试<br></code></pre></td></tr></table></figure><p>这种模块划分的优点：</p><ol><li>高内聚低耦合，每个模块职责明确</li><li>便于多人协作开发</li><li>便于单元测试</li><li>便于后期维护和扩展</li></ol><p>Me：可以的，但是界面我不想使用QT等方式，我想提供webserver给外部使用，只提供简</p><p>明白了，我们可以将UI模块改为WebServer模块，使用RESTful API提供服务。这样的设计更加轻量级且灵活。让我修改一下相关模块：</p><p>移除原来的UI模块，替换为WebServer模块：</p><p>修改后的项目结构：</p><p>主要API功能：</p><ol><li><p>系统控制</p><ul><li>GET &#x2F;api&#x2F;v1&#x2F;status - 获取系统状态</li><li>POST &#x2F;api&#x2F;v1&#x2F;emergency-stop - 紧急停止</li></ul></li><li><p>轴控制</p><ul><li>GET &#x2F;api&#x2F;v1&#x2F;axis&#x2F;{id}&#x2F;status - 获取指定轴状态</li><li>POST &#x2F;api&#x2F;v1&#x2F;axis&#x2F;{id}&#x2F;move - 控制指定轴移动</li><li>POST &#x2F;api&#x2F;v1&#x2F;axis&#x2F;{id}&#x2F;home - 指定轴回零</li></ul></li><li><p>程序控制</p><ul><li>POST &#x2F;api&#x2F;v1&#x2F;program&#x2F;upload - 上传G代码程序</li><li>POST &#x2F;api&#x2F;v1&#x2F;program&#x2F;start - 开始执行程序</li><li>POST &#x2F;api&#x2F;v1&#x2F;program&#x2F;pause - 暂停程序</li><li>POST &#x2F;api&#x2F;v1&#x2F;program&#x2F;stop - 停止程序</li></ul></li><li><p>配置管理</p><ul><li>GET &#x2F;api&#x2F;v1&#x2F;config - 获取系统配置</li><li>PUT &#x2F;api&#x2F;v1&#x2F;config - 更新系统配置<br>对于Web服务器的实现，我建议使用以下几个C++库之一：</li></ul></li><li><p>cpp-httplib - 轻量级HTTP服务器库</p></li><li><p>Crow - 现代C++ Web框架</p></li><li><p>Drogon - 高性能C++ Web应用框架<br>您觉得这个设计如何？我们可以进一步讨论具体的API设计或选择哪个Web框</p></li></ol></blockquote><h2 id="2-项目规划"><a href="#2-项目规划" class="headerlink" title="2. 项目规划"></a>2. 项目规划</h2><h3 id="2-1-项目计划"><a href="#2-1-项目计划" class="headerlink" title="2.1 项目计划"></a>2.1 项目计划</h3><p><strong>这一步非常重要，让 AI 将数据拆分成详细的内容，后续可以让他直接根据计划和代码实现情况，就可以继续工作了</strong></p><blockquote><p>Me：可以的，你可以把这些工作都拆分成具体的工作，整理一个多人开发的工作清单吗</p><p>AI：</p><p>好的，我来帮您整理一个多人开发的工作清单，按照功能模块和优先级划分：</p><h3 id="第一阶段：核心功能开发"><a href="#第一阶段：核心功能开发" class="headerlink" title="第一阶段：核心功能开发"></a>第一阶段：核心功能开发</h3><ol><li><p><strong>核心控制模块（Core Team）</strong></p><ul><li><input disabled="" type="checkbox"> 实现核心控制器框架</li><li><input disabled="" type="checkbox"> 开发实时任务调度系统</li><li><input disabled="" type="checkbox"> 实现系统状态管理</li><li><input disabled="" type="checkbox"> 开发紧急停止处理机制</li><li><input disabled="" type="checkbox"> 单元测试编写</li></ul></li><li><p><strong>运动控制模块（Motion Team）</strong></p><ul><li><input disabled="" type="checkbox"> 轴控制基础类实现</li><li><input disabled="" type="checkbox"> 加减速算法开发</li><li><input disabled="" type="checkbox"> 多轴协同控制</li><li><input disabled="" type="checkbox"> 回零功能实现</li><li><input disabled="" type="checkbox"> 单元测试编写</li></ul></li><li><p><strong>插补引擎模块（Algorithm Team）</strong></p><ul><li><input disabled="" type="checkbox"> 直线插补算法实现</li><li><input disabled="" type="checkbox"> 圆弧插补算法实现</li><li><input disabled="" type="checkbox"> 样条曲线插补实现</li><li><input disabled="" type="checkbox"> 前瞻算法开发</li><li><input disabled="" type="checkbox"> 算法性能优化</li><li><input disabled="" type="checkbox"> 单元测试编写</li></ul></li></ol><h3 id="第二阶段：功能扩展"><a href="#第二阶段：功能扩展" class="headerlink" title="第二阶段：功能扩展"></a>第二阶段：功能扩展</h3><ol start="4"><li><p><strong>G代码解析模块（Parser Team）</strong></p><ul><li><input disabled="" type="checkbox"> G代码词法分析器开发</li><li><input disabled="" type="checkbox"> G代码语法解析器开发</li><li><input disabled="" type="checkbox"> 指令转换系统实现</li><li><input disabled="" type="checkbox"> 支持自定义宏</li><li><input disabled="" type="checkbox"> 单元测试编写</li></ul></li><li><p><strong>Web服务器模块（Web Team）</strong></p><ul><li><input disabled="" type="checkbox"> HTTP服务器框架搭建</li><li><input disabled="" type="checkbox"> RESTful API设计和实现</li><li><input disabled="" type="checkbox"> WebSocket实时数据推送</li><li><input disabled="" type="checkbox"> API文档编写</li><li><input disabled="" type="checkbox"> 接口测试用例编写</li></ul></li><li><p><strong>配置管理模块（Config Team）</strong></p><ul><li><input disabled="" type="checkbox"> 配置文件格式设计</li><li><input disabled="" type="checkbox"> 配置读写实现</li><li><input disabled="" type="checkbox"> 配置验证机制</li><li><input disabled="" type="checkbox"> 配置热更新功能</li><li><input disabled="" type="checkbox"> 单元测试编写</li></ul></li></ol><h3 id="第三阶段：系统集成与优化"><a href="#第三阶段：系统集成与优化" class="headerlink" title="第三阶段：系统集成与优化"></a>第三阶段：系统集成与优化</h3><ol start="7"><li><p><strong>诊断和日志模块（Diagnostic Team）</strong></p><ul><li><input disabled="" type="checkbox"> 日志系统实现</li><li><input disabled="" type="checkbox"> 错误诊断功能</li><li><input disabled="" type="checkbox"> 性能监控系统</li><li><input disabled="" type="checkbox"> 数据统计功能</li><li><input disabled="" type="checkbox"> 单元测试编写</li></ul></li><li><p><strong>系统集成（Integration Team）</strong></p><ul><li><input disabled="" type="checkbox"> 模块间通信机制实现</li><li><input disabled="" type="checkbox"> 系统集成测试</li><li><input disabled="" type="checkbox"> 性能测试和优化</li><li><input disabled="" type="checkbox"> 内存泄漏检测</li><li><input disabled="" type="checkbox"> 系统稳定性测试</li></ul></li></ol><h3 id="第四阶段：文档和工具"><a href="#第四阶段：文档和工具" class="headerlink" title="第四阶段：文档和工具"></a>第四阶段：文档和工具</h3><ol start="9"><li><p><strong>文档团队（Documentation Team）</strong></p><ul><li><input disabled="" type="checkbox"> API文档编写</li><li><input disabled="" type="checkbox"> 系统架构文档</li><li><input disabled="" type="checkbox"> 开发指南编写</li><li><input disabled="" type="checkbox"> 用户手册编写</li><li><input disabled="" type="checkbox"> 示例代码编写</li></ul></li><li><p><strong>工具开发（Tools Team）</strong></p><ul><li><input disabled="" type="checkbox"> 调试工具开发</li><li><input disabled="" type="checkbox"> 性能分析工具</li><li><input disabled="" type="checkbox"> 日志分析工具</li><li><input disabled="" type="checkbox"> 配置工具开发</li><li><input disabled="" type="checkbox"> 测试工具开发</li></ul></li></ol><h3 id="建议的团队配置："><a href="#建议的团队配置：" class="headerlink" title="建议的团队配置："></a>建议的团队配置：</h3><ul><li>Core Team: 2-3人（高级开发工程师）</li><li>Motion Team: 2人（运动控制专家）</li><li>Algorithm Team: 2人（算法工程师）</li><li>Parser Team: 1-2人（编译原理专家）</li><li>Web Team: 2人（全栈开发工程师）</li><li>Config Team: 1人（开发工程师）</li><li>Diagnostic Team: 1-2人（开发工程师）</li><li>Integration Team: 2人（系统工程师）</li><li>Documentation Team: 1人（技术文档工程师）</li><li>Tools Team: 1-2人（开发工程师）</li></ul><p>总人力需求：15-19人</p><p>您觉得这个任务分配合理吗？我们可以根据实际情况调整团队规模和任务优先级。</p><p>Me：不过我打算都使用AI来完成，你觉得提供什么样的计划和Prompt给AI编写会给好用</p><p>AI：我来帮您设计一个基于AI辅助开发的计划，包括每个模块的Prompt设计思路：</p><h3 id="1-核心控制模块开发"><a href="#1-核心控制模块开发" class="headerlink" title="1. 核心控制模块开发"></a>1. 核心控制模块开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\core_module.md">开发步骤：<br>1. 框架设计<br>Prompt示例：<br>&quot;请设计一个实时数控系统的核心控制器类，需要包含以下功能：<br>- 实时任务调度<br>- 系统状态管理<br>- 紧急停止处理<br>- 与其他模块的通信接口<br>请提供详细的类设计和关键方法实现。&quot;<br><br>2. 实现细节<br>Prompt示例：<br>&quot;基于上述CoreController类设计，请实现实时任务调度系统，要求：<br>- 支持不同优先级的任务<br>- 确保关键任务的实时性<br>- 提供任务取消机制<br>- 包含完整的错误处理&quot;<br></code></pre></td></tr></table></figure><h3 id="2-运动控制模块开发"><a href="#2-运动控制模块开发" class="headerlink" title="2. 运动控制模块开发"></a>2. 运动控制模块开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\motion_module.md">开发步骤：<br>1. 基础类设计<br>Prompt示例：<br>&quot;设计一个数控系统的运动控制模块，需要：<br>- 支持多轴控制<br>- 实现加减速算法<br>- 位置和速度控制<br>- 提供轴状态监控<br>请提供类图和核心接口设计。&quot;<br><br>2. 算法实现<br>Prompt示例：<br>&quot;实现S形加减速算法，要求：<br>- 支持加加速度限制<br>- 平滑的速度曲线<br>- 考虑机械特性<br>- 提供参数调整接口&quot;<br></code></pre></td></tr></table></figure><h3 id="3-插补引擎模块开发"><a href="#3-插补引擎模块开发" class="headerlink" title="3. 插补引擎模块开发"></a>3. 插补引擎模块开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\interpolation_module.md">开发步骤：<br>1. 算法框架<br>Prompt示例：<br>&quot;设计一个支持多种插补方式的插补引擎，包括：<br>- 直线插补<br>- 圆弧插补<br>- 样条曲线插补<br>请提供算法框架和关键数据结构。&quot;<br><br>2. 具体算法<br>Prompt示例：<br>&quot;实现三次样条曲线插补算法，要求：<br>- 保证路径连续性<br>- 优化计算效率<br>- 考虑速度规划<br>- 提供误差控制&quot;<br></code></pre></td></tr></table></figure><h3 id="4-Web服务器模块开发"><a href="#4-Web服务器模块开发" class="headerlink" title="4. Web服务器模块开发"></a>4. Web服务器模块开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\webserver_module.md">开发步骤：<br>1. API设计<br>Prompt示例：<br>&quot;设计一个数控系统的RESTful API，需要包含：<br>- 系统状态查询<br>- 运动控制指令<br>- 程序文件管理<br>- 配置管理<br>请提供详细的API文档。&quot;<br><br>2. 实现细节<br>Prompt示例：<br>&quot;使用C++实现上述API中的运动控制接口，要求：<br>- 处理并发请求<br>- 实现实时数据推送<br>- 提供错误处理<br>- 支持认证授权&quot;<br></code></pre></td></tr></table></figure><h3 id="开发流程建议"><a href="#开发流程建议" class="headerlink" title="开发流程建议"></a>开发流程建议</h3><ol><li><p><strong>循序渐进</strong></p><ul><li>先让AI生成框架设计</li><li>审查并确认设计合理性</li><li>再让AI实现具体细节</li><li>最后进行集成测试</li></ul></li><li><p><strong>提示词技巧</strong></p><ul><li>明确指定输入输出格式</li><li>提供具体的性能要求</li><li>要求包含错误处理</li><li>要求提供测试用例</li></ul></li><li><p><strong>代码审查要点</strong></p><ul><li>检查实时性要求</li><li>验证错误处理</li><li>确认接口一致性</li><li>检查内存管理</li></ul></li><li><p><strong>迭代优化</strong></p><ul><li>收集实际运行数据</li><li>针对性能瓶颈优化</li><li>完善错误处理</li><li>改进代码结构</li></ul></li></ol><p>您觉得这个AI辅助开发计划如何？我们可以先从某个具体模块开始尝试。</p><p>Me：请帮我完整的整理下</p><p>AI：我来帮您整理一个完整的AI辅助开发计划：</p><h3 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_development_plan.md">1. 项目结构创建<br>- 生成基础目录结构<br>- 创建CMake配置文件<br>- 设置基础编译环境<br>- 配置单元测试框架<br><br>2. 基础类型定义<br>- 坐标系统<br>- 运动参数<br>- 错误代码<br>- 系统状态定义<br></code></pre></td></tr></table></figure><h3 id="二、核心模块开发序列"><a href="#二、核心模块开发序列" class="headerlink" title="二、核心模块开发序列"></a>二、核心模块开发序列</h3><h4 id="1-核心控制模块"><a href="#1-核心控制模块" class="headerlink" title="1. 核心控制模块"></a>1. 核心控制模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\01_core_development.md">阶段1：基础框架<br>- CoreController 类设计<br>- 实时调度系统<br>- 状态管理系统<br>- 错误处理机制<br><br>阶段2：功能实现<br>- 任务队列管理<br>- 系统初始化流程<br>- 安全监控系统<br>- 模块间通信<br></code></pre></td></tr></table></figure><h4 id="2-运动控制模块"><a href="#2-运动控制模块" class="headerlink" title="2. 运动控制模块"></a>2. 运动控制模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\02_motion_development.md">阶段1：基础功能<br>- Axis 类实现<br>- 运动参数管理<br>- 位置控制系统<br>- 速度控制系统<br><br>阶段2：高级功能<br>- 加减速算法<br>- 多轴协同<br>- 限位处理<br>- 回零功能<br></code></pre></td></tr></table></figure><h4 id="3-插补引擎模块"><a href="#3-插补引擎模块" class="headerlink" title="3. 插补引擎模块"></a>3. 插补引擎模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\03_interpolation_development.md">阶段1：基础算法<br>- 直线插补<br>- 圆弧插补<br>- 基础速度规划<br>- 路径优化<br><br>阶段2：高级算法<br>- 样条曲线插补<br>- 前瞻算法<br>- 轨迹平滑<br>- 误差补偿<br></code></pre></td></tr></table></figure><h4 id="4-G代码解析模块"><a href="#4-G代码解析模块" class="headerlink" title="4. G代码解析模块"></a>4. G代码解析模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\04_gcode_development.md">阶段1：解析器<br>- 词法分析器<br>- 语法分析器<br>- 指令解释器<br>- 参数处理<br><br>阶段2：执行系统<br>- 指令队列管理<br>- 宏指令处理<br>- 坐标系转换<br>- 刀具补偿<br></code></pre></td></tr></table></figure><h4 id="5-Web服务器模块"><a href="#5-Web服务器模块" class="headerlink" title="5. Web服务器模块"></a>5. Web服务器模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_tasks\05_webserver_development.md">阶段1：基础服务<br>- HTTP服务器<br>- REST API实现<br>- WebSocket服务<br>- 认证授权<br><br>阶段2：功能接口<br>- 状态监控API<br>- 控制指令API<br>- 文件管理API<br>- 配置管理API<br></code></pre></td></tr></table></figure><h3 id="三、开发流程指南"><a href="#三、开发流程指南" class="headerlink" title="三、开发流程指南"></a>三、开发流程指南</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_development_guide.md">1. 每个模块的开发流程：<br>   a. 设计阶段<br>   - 接口设计<br>   - 类结构设计<br>   - 算法设计<br>   - 错误处理设计<br><br>   b. 实现阶段<br>   - 核心功能实现<br>   - 单元测试编写<br>   - 性能优化<br>   - 文档生成<br><br>   c. 测试阶段<br>   - 单元测试<br>   - 集成测试<br>   - 性能测试<br>   - 稳定性测试<br><br>2. AI提示词模板：<br>   a. 设计提示：<br>   &quot;请设计[模块名称]，需要满足以下要求：<br>   - 功能需求：[具体功能]<br>   - 性能要求：[具体指标]<br>   - 接口要求：[接口规范]<br>   - 错误处理：[处理方式]<br>   请提供详细的类设计和关键方法定义。&quot;<br><br>   b. 实现提示：<br>   &quot;基于[类名]设计，请实现以下功能：<br>   - 具体功能：[功能描述]<br>   - 输入参数：[参数说明]<br>   - 输出要求：[输出规范]<br>   - 性能要求：[性能指标]<br>   请提供完整的代码实现和单元测试。&quot;<br><br>3. 代码审查重点：<br>   - 实时性保证<br>   - 内存管理<br>   - 错误处理<br>   - 代码规范<br>   - 性能优化<br>   - 接口一致性<br></code></pre></td></tr></table></figure><h3 id="四、测试计划"><a href="#四、测试计划" class="headerlink" title="四、测试计划"></a>四、测试计划</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext:d:\Repos\XXCNC\docs\ai_testing_plan.md">1. 单元测试<br>- 功能测试<br>- 边界测试<br>- 异常测试<br>- 性能测试<br><br>2. 集成测试<br>- 模块间通信<br>- 功能集成<br>- 性能验证<br>- 稳定性测试<br><br>3. 系统测试<br>- 完整功能测试<br>- 负载测试<br>- 长期稳定性测试<br>- 异常恢复测试<br></code></pre></td></tr></table></figure><p>您觉得这个计划如何？我们可以从任何一个模块开始实施。每个模块都可以进一步细化，根据实际需求调整开发顺序和优先级。</p></blockquote><h3 id="2-2-归档"><a href="#2-2-归档" class="headerlink" title="2.2 归档"></a>2.2 归档</h3><p>接下来就是让 AI 把内容归档到 plan.md，进行我们的开发工作</p><h2 id="3-开发工作"><a href="#3-开发工作" class="headerlink" title="3. 开发工作"></a>3. 开发工作</h2><h3 id="3-1-项目初始化"><a href="#3-1-项目初始化" class="headerlink" title="3.1 项目初始化"></a>3.1 项目初始化</h3><p>这个阶段先让 AI 进行了项目的构建和初始化，包括了 CMake 项目搭建，这部分完成的不错</p><blockquote><p>Me: 我们按照这个计划开始准备开发工作吧</p><p>AI：我会帮您开始项目的初始化工作。根据开发计划，我们首先需要创建基础的项目结构，包括设置CMake配置、编译环境和单元测试框架，然后定义基础类型如坐标系统和运动参数。完成初始化后，我们将按照计划开始核心控制模块的开发。</p><p>让我们先查看当前项目目录的结构，以确定需要创建哪些基础目录和文件。</p><p>XXCNC</p><p>根据项目计划，我们需要创建一个CMake项目结构。首先创建CMakeLists.txt作为主配置文件，设置项目基本信息和编译选项。</p><p>CMakeLists.txt</p><p>接下来创建src目录下的CMakeLists.txt文件，配置源代码的编译规则和依赖关系。</p><p>src\CMakeLists.txt</p><p>现在我们需要创建tests目录下的CMakeLists.txt文件，配置单元测试框架和测试用例的编译规则。</p><p>tests\CMakeLists.txt</p><p>现在我们需要创建基础的目录结构，包括src和tests目录下的各个模块子目录，以及一个.gitignore文件来排除不需要的文件。</p><p>让我们创建基础的目录结构，包括src和tests目录下的各个模块子目录。这些目录将用于存放源代码和测试文件。</p><p>src\core\README.md</p><p>接下来我们需要创建基础类型定义文件，包括坐标系统、运动参数、错误代码和系统状态定义。我们先创建一个基础类型的头文件。</p><p>src\include\xxcnc\types.h</p><p>已完成项目的初始化工作，主要包括：</p><ol><li><p>创建了基础的项目结构：</p><ul><li>配置了主CMakeLists.txt文件，设置了项目基本信息和编译选项</li><li>创建了src和tests目录的CMakeLists.txt，配置了源代码编译和测试框架</li><li>建立了核心模块的目录结构和说明文档</li></ul></li><li><p>定义了基础类型系统：</p><ul><li>在types.h中定义了基本数值类型</li><li>实现了坐标系统（Point结构）</li><li>定义了运动参数（MotionParameters结构）</li><li>创建了错误码系统（ErrorCode枚举）</li><li>定义了系统状态（SystemState枚举）</li></ul></li><li><p>设置了开发环境：</p><ul><li>配置了C++17标准</li><li>设置了严格的编译警告</li><li>集成了GTest测试框架</li><li>配置了安装和导出规则<br>项目初始化工作已经完成，现在可以开始进行核心模块的开发工作。</li></ul></li></ol></blockquote><blockquote><p>我会帮您配置和编译这个XXCNC项目。根据项目结构，我看到已经有基础的CMakeLists.txt文件和源代码目录，我将创建build目录，配置CMake项目并进行编译。编译过程将包括所有核心模块和测试用例。</p><p>首先创建build目录并进入该目录，然后使用CMake配置项目。</p><p>XXCNC 终端</p><p>mkdir build</p><p>现在我们使用CMake来配置项目，生成构建文件。</p><p>XXCNC 终端</p><p>cmake -B build -S .</p><p>我看到CMake配置失败了，这是因为缺少必要的源文件。让我先检查一下CMakeLists.txt文件的内容，以便了解项目的配置要求。</p><p>src\CMakeLists.txt</p><p>tests\CMakeLists.txt</p><p>CMakeLists.txt</p><p>根据CMake配置文件的要求，我们需要创建核心控制模块的基础文件。让我们先创建CoreController的实现文件。</p><p>src\core\CoreController.cpp</p><p>现在我们需要创建CoreController的头文件，定义基本的类接口和系统状态枚举。</p><p>src\include\xxcnc\core\CoreController.h</p><p>我们需要创建一个基本的测试文件来验证CoreController的功能，这样才能通过CMake的配置。</p><p>tests\core\CoreControllerTest.cpp</p><p>现在我们已经创建了必要的源文件，让我们重新运行CMake配置命令来生成构建文件。</p><p>XXCNC 终端</p><p>cmake -B build -S .</p><p>我们需要修改CMakeLists.txt文件，暂时只包含已经创建的源文件，移除尚未创建的文件。</p><p>src\CMakeLists.txt</p><p>我们还需要修改测试的CMakeLists.txt文件，只包含已经创建的测试文件。</p><p>tests\CMakeLists.txt</p><p>现在我们已经修改了CMake配置文件，让我们重新运行CMake配置命令，然后使用Visual Studio的构建工具进行编译。</p><p>XXCNC 终端</p><p>cmake -B build -S .</p><p>CMake配置文件中存在语法错误，需要修复src&#x2F;CMakeLists.txt文件中的格式问题。</p><p>src\CMakeLists.txt</p><p>现在我们已经修复了CMake配置文件中的语法错误，让我们重新运行CMake配置命令，然后使用Visual Studio的构建工具进行编译。</p><p>XXCNC 终端</p><p>cmake -B build -S .</p><p>需要继续修复src&#x2F;CMakeLists.txt文件中的语法错误，删除所有未使用的源文件引用。</p><p>src\CMakeLists.txt</p><p>现在我们已经完全修复了CMake配置文件，让我们重新运行CMake配置命令，然后使用Visual Studio的构建工具进行编译。</p><p>XXCNC 终端</p><p>cmake -B build -S .</p><p>需要修复tests&#x2F;CMakeLists.txt文件中的语法错误，删除所有未使用的测试文件引用。</p><p>tests\CMakeLists.txt</p><p>现在我们已经修复了所有CMake配置文件的问题，让我们重新运行CMake配置命令，然后使用Visual Studio的构建工具进行编译。</p><p>XXCNC 终端</p><p>cmake -B build -S .</p><p>CMake配置已经成功完成，现在让我们使用Visual Studio的MSBuild工具来编译项目。</p><p>XXCNC 终端</p><p>cmake –build build –config Release</p><p>编译失败的主要原因是文件编码问题，需要将源文件保存为UTF-8格式。我们需要修改CoreController.h文件的编码格式。</p><p>src\include\xxcnc\core\CoreController.h</p><p>需要修改CoreController.cpp文件的编码格式，将中文注释改为英文，以解决编码问题。</p><p>src\core\CoreController.cpp</p><p>现在我们已经修复了源文件的编码问题，让我们重新尝试编译项目。</p><p>XXCNC 终端</p><p>cmake –build build –config Release</p><p>成功完成了XXCNC项目的编译工作。主要完成了以下任务：</p><ol><li><p>创建并配置了基础的项目结构：</p><ul><li>创建了核心控制模块的源文件和头文件</li><li>实现了基本的CoreController类</li><li>添加了系统状态管理的基础功能</li></ul></li><li><p>配置了CMake构建系统：</p><ul><li>修复了CMakeLists.txt文件中的语法问题</li><li>正确配置了库目标和测试目标</li><li>设置了适当的包含目录和编译选项</li></ul></li><li><p>解决了编码问题：</p><ul><li>将源文件转换为UTF-8编码</li><li>修改了中文注释为英文注释</li></ul></li><li><p>成功编译了项目：</p><ul><li>生成了xxcnc静态库</li><li>编译了单元测试可执行文件<br>项目现在已经具备了基本的开发框架，可以继续进行功能开发。</li></ul></li></ol></blockquote><h3 id="3-2-添加三方库、单元测试"><a href="#3-2-添加三方库、单元测试" class="headerlink" title="3.2 添加三方库、单元测试"></a>3.2 添加三方库、单元测试</h3><p><strong>但是接下来他就碰到了第一座大山，不知道怎么使用 vcpkg，在尝试了七八次后无果，人工介入帮其进行安装</strong></p><h3 id="3-3-基础运动模型"><a href="#3-3-基础运动模型" class="headerlink" title="3.3 基础运动模型"></a>3.3 基础运动模型</h3><p>这部分开发很快，但是内容不多，只是一些简单的定义、状态切换以及日志和异常处理等</p><blockquote><p>已成功完成了核心控制模块的功能扩展：</p><ol><li><p>在CoreController中新增了两个重要功能：</p><ul><li>紧急停止（Emergency Stop）功能：可以在任何状态下触发，将系统置于紧急停止状态</li><li>回零（Homing）功能：在空闲状态下执行回零操作，完成后返回空闲状态</li></ul></li><li><p>更新了状态管理系统：</p><ul><li>在SystemState枚举中增加了HOMING和EMERGENCY_STOP状态</li><li>确保了状态转换的正确性和安全性</li></ul></li><li><p>完善了错误处理机制：</p><ul><li>为所有新增功能添加了异常捕获和处理</li><li>通过日志系统记录详细的错误信息</li></ul></li><li><p>添加了完整的单元测试：</p><ul><li>验证紧急停止在不同状态下的行为</li><li>测试回零操作在不同状态下的表现</li><li>确保状态转换的正确性</li></ul></li></ol></blockquote><blockquote><p>已完成运动控制模块中Axis类的基础功能实现：</p><ul><li><p>创建了Axis.h头文件，定义了以下关键组件：</p><ul><li>AxisState枚举类型，描述轴的运动状态</li><li>AxisParameters结构体，包含运动参数配置</li><li>Axis类的完整接口定义</li></ul></li><li><p>实现了Axis.cpp，完成了以下功能：</p><ul><li>基础运动控制（使能、禁用、停止）</li><li>位置控制系统（moveTo方法）</li><li>速度控制系统（moveVelocity方法）</li><li>回零功能（home方法）</li><li>实时状态更新（update方法）</li></ul></li><li><p>实现了关键的安全特性：</p><ul><li>软限位检查</li><li>速度和加速度限制</li><li>紧急停止功能</li><li>状态监控和错误处理</li></ul></li></ul></blockquote><h3 id="3-4-插补器开发"><a href="#3-4-插补器开发" class="headerlink" title="3.4 插补器开发"></a>3.4 插补器开发</h3><p>开发了一个插补器，经过了大约 20 轮左右的对话，包括且不限于以下问题：</p><ul><li>语法错误，编译通不过</li><li>编码错误</li><li>未定义的类、成员变量等</li></ul><p>然后开始单元测试，一些简单的 case 立刻就过了，卡在一些功能问题，经过了超过 30 轮对话，包括：</p><ul><li>插补器的退出条件错误，导致一直无法退出</li><li>性能条件写太随意，导致算法一直无法满足一直修改 （最终也没解决）</li></ul><blockquote><p>已完成插补引擎模块的基础算法实现，包括以下功能：</p><ul><li>创建了 InterpolationEngine 类，实现了基础的插补算法框架</li><li>实现了直线插补算法，支持三轴联动</li><li>实现了圆弧插补算法，支持顺时针和逆时针圆弧</li><li>实现了梯形速度规划，包含加速、匀速和减速三个阶段</li><li>实现了基于三点平滑的路径优化算法</li></ul><p>已完成插补引擎模块的单元测试补充工作，主要完成了以下内容：</p><ul><li>创建了 InterpolationEngineTest.cpp 测试文件</li><li>实现了基础的测试框架，包括 SetUp 和 TearDown 方法</li><li>添加了直线插补测试，验证基本功能和路径连续性</li><li>添加了圆弧插补测试，验证圆弧路径的正确性和半径一致性</li><li>实现了边界条件测试，包括零距离移动和极小距离移动的情况</li><li>添加了性能测试，验证算法的实时性和分段合理性</li><li>实现了错误处理测试，验证非法参数的异常处理<br>所有测试用例都遵循了项目的测试规范，覆盖了基本功能、边界条件、性能要求和错误处理等方面，确保了插补引擎模块的代码质量和功能正确性。</li></ul></blockquote><h3 id="3-5-运动功能进一步开发"><a href="#3-5-运动功能进一步开发" class="headerlink" title="3.5 运动功能进一步开发"></a>3.5 运动功能进一步开发</h3><p>这里进一步完善功能，此时出现了一个问题：他新写的测试用例没有添加到项目里，经过多次的修改，仍然未解决。其他功能均可在差不多 2~4 轮对话，测试失败后完成修复。</p><blockquote><p>本次开发完成了运动控制模块的基础功能实现，主要包括：</p><ul><li>创建了 MotionController 类，实现了多轴协同运动控制系统</li><li>实现了轴的基本控制功能，包括：<ul><li>轴的使能&#x2F;禁用</li><li>位置控制</li><li>速度控制</li><li>加速度控制</li><li>软限位保护</li><li>紧急停止功能</li></ul></li><li>实现了直线插补运动功能，支持：<ul><li>多轴协同运动</li><li>速度规划</li><li>加速度规划</li><li>实时状态更新<br>代码采用了面向对象的设计方法，通过类的继承和组合实现了功能的模块化和可扩展性。同时，代码中加入了完善的错误处理和状态管理机制，确保了运动控制的安全性和可靠性。</li></ul></li></ul></blockquote><h3 id="3-6-G代码解析"><a href="#3-6-G代码解析" class="headerlink" title="3.6 G代码解析"></a>3.6 G代码解析</h3><p>此处新增的功能未作验证，基本生成后就能通过编译</p><blockquote><p>已完成G代码执行系统的基础框架开发，主要包括：</p><ol><li><p>创建了GCodeExecutor类，实现了指令队列管理的核心功能：</p><ul><li>指令队列的添加和执行</li><li>暂停、恢复和停止功能</li><li>线程安全的队列操作</li><li>异步执行支持</li></ul></li><li><p>设计并实现了完整的G代码命令体系：</p><ul><li>定义了基础的GCodeCommand类</li><li>实现了多种具体命令类型：<ul><li>MotionCommand（运动指令）</li><li>ToolCommand（刀具指令）</li><li>CoordinateCommand（坐标系统指令）</li><li>MacroCommand（宏指令）</li></ul></li></ul></li><li><p>建立了命令参数体系：</p><ul><li>创建了基础的CommandParams结构</li><li>实现了各类具体参数结构：<ul><li>MotionParams（运动参数）</li><li>ToolParams（刀具参数）</li><li>CoordinateParams（坐标系统参数）</li><li>MacroParams（宏指令参数）<br>这些实现为后续的功能扩展（如宏指令处理、坐标系转换和刀具补偿）奠定了良好的基础。</li></ul></li></ul></li></ol></blockquote><h3 id="3-7-添加-web-功能"><a href="#3-7-添加-web-功能" class="headerlink" title="3.7 添加 web 功能"></a>3.7 添加 web 功能</h3><p>这里主要的难点是：CMake 集成三方库，多次失败后，人工调整添加（他名字写错了），整体对话大约 20 轮</p><blockquote><p>已完成Web服务器模块的基础功能实现：</p><ul><li>创建了Web服务器模块的基础目录结构</li><li>实现了WebServer类及其PIMPL实现类WebServerImpl</li><li>添加了基础HTTP REST API接口：<ul><li>&#x2F;api&#x2F;health：健康检查接口</li><li>&#x2F;api&#x2F;status：系统状态查询接口</li></ul></li><li>配置了CMake构建系统，包含必要的依赖项：<ul><li>cpp-httplib：HTTP服务器库</li><li>spdlog：日志记录</li><li>nlohmann-json：JSON处理<br>该模块现在具备了基本的Web服务功能，可以启动HTTP服务器并响应基本的API请求。后续可以根据需要扩展更多API接口，添加WebSocket支持，以及实现更复杂的功能。</li></ul></li></ul></blockquote><h3 id="3-8-前端页面开发-初版"><a href="#3-8-前端页面开发-初版" class="headerlink" title="3.8 前端页面开发-初版"></a>3.8 前端页面开发-初版</h3><p>这个是 AI 生成的第一版界面，只有按钮没有实际的动作</p><p>经过 20 轮左右的沟通，发现 Trae 中的 Claude-3.5 无法满足工作了，所以切换到了 windsurf 继续工作</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250302014405797.png" alt="image-20250302014405797"></p><p>让 windsurf 了解了项目的计划、当前的进度后，开始开发。</p><p>windsurf 的 Flow 是支持自己执行命令、查找文件等动作的，我直接全开了允许，让其进行自动工作。</p><blockquote><p>让我先查看一下项目中的web相关文件。</p><p>Searched for files ind:\Repos\XXCNC</p><p>4 results</p><p>让我检查一下web服务器相关的代码。</p><p>Searched codebase</p><p>255 results</p><p>让我查看一下前端页面的代码。</p><p>Analyzed</p><p>index.html:(1-200)</p><p>让我看看前端的JavaScript代码。</p><p>Analyzed</p><p>main.js:(1-200)</p><p>我发现了几个问题：</p><ol><li>前端代码中有一些按钮的ID与HTML中的不匹配：<ul><li>HTML中有 <code>start-btn</code>, <code>pause-btn</code>, <code>resume-btn</code>，但在JavaScript中使用的是 <code>btnPause</code>, <code>btnResume</code></li><li>HTML中没有 <code>btnUpload</code>，但JavaScript中尝试添加事件监听器</li><li>HTML中缺少 <code>speed</code> 元素，但JavaScript中尝试引用它</li></ul></li><li>一些DOM元素的ID不匹配：<ul><li>JavaScript中使用 <code>fileList</code>，但HTML中是 <code>file-list</code></li><li>JavaScript中使用 <code>speed</code>，但HTML中没有对应元素</li></ul></li><li>轨迹查看器的初始化代码有问题：<ul><li><code>script.onload</code> 中的 <code>script</code> 变量未定义</li><li>轨迹查看器的初始化应该在页面加载完成后进行</li></ul></li></ol><p>让我修复这些问题：</p><p>Edited</p><p>main.js</p><p>让我看看轨迹查看器的代码：</p><p>Analyzed</p><p>trajectory-viewer.js:(1-200)</p><p>我发现轨迹查看器也有一些问题：</p><ol><li>Three.js库的引入方式不合适，应该在HTML中通过CDN引入</li><li>轨迹查看器的初始化代码有问题，不应该在script.onload中定义类</li><li>视图控制按钮的事件监听器绑定到了不存在的元素上</li></ol><p>让我先修改HTML文件，添加Three.js库和视图控制按钮：</p><p>Edited</p><p>index.html</p><p>现在让我修改轨迹查看器的代码：</p><p>Edited</p><p>trajectory-viewer.js</p><p>我已经修复了前端代码中的主要问题：</p><ol><li>修复了HTML和JavaScript代码中的DOM元素ID不匹配问题</li><li>改进了轨迹查看器的初始化和事件绑定</li><li>添加了视图控制按钮</li><li>优化了代码结构和错误处理</li></ol><p>主要改进包括：</p><ol><li>在HTML中：<ul><li>通过CDN引入Three.js和OrbitControls库</li></ul></li></ol><ul><li>添加了轨迹查看器的视图控制按钮</li><li>修正了一些元素的ID</li></ul><ol start="2"><li>在main.js中：<ul><li>修正了DOM元素的选择器</li><li>将所有事件监听器移到页面加载完成后再绑定</li><li>改进了状态更新和文件上传的逻辑</li><li>优化了错误处理</li></ul></li><li>在trajectory-viewer.js中：<ul><li>移除了动态加载Three.js的代码</li></ul></li></ol><ul><li>改进了类的初始化方式，通过参数传入canvas ID</li><li>添加了更多的错误检查</li><li>使用ResizeObserver来处理视图大小变化</li><li>改进了轨迹点的添加和清除逻辑</li></ul><p>现在让我检查一下后端代码：</p><p>Searched codebase</p><p>70 results</p><p>让我看看WebServer的实现：</p><p>Searched codebase</p><p>8 results</p><p>让我看看WebServer的头文件：</p><p>Searched for files ind:\Repos\XXCNC</p><p>2 results</p><p>让我看看WebServer的头文件内容：</p><p>Analyzed</p><p>WebServer.h:(1-200)</p><p>让我看看WebServer的实现文件：</p><p>Searched for files ind:\Repos\XXCNC</p><p>1 result</p><p>Analyzed</p><p>WebServer.cpp:(1-200)</p><p>通过查看代码，我发现了几个问题：</p><ol><li>WebServer的构造函数有两个版本，但在<code>main.cpp</code>中使用的是无参版本，这意味着没有提供WebAPI实现。</li><li>WebServer的配置在启动时没有完全设置：<ul><li>没有设置<code>enable_cors</code></li></ul></li></ol><ul><li>没有正确设置<code>static_dir</code>的完整路径</li></ul><ol start="3"><li>回调函数没有完全实现：</li></ol><ul><li>状态回调只返回了基本的位置信息，没有包含进给速度和其他状态</li><li>命令回调缺少了一些重要命令的处理（如start、pause、resume等）</li><li>文件上传回调没有处理轨迹信息的生成</li></ul><p>让我修复这些问题。首先修改main.cpp：</p><p>Edited</p><p>main.cpp</p><p>让我修改SystemStatus类，添加更多状态字段：</p><p>Edited</p><p>main.cpp</p><p>现在我已经修复了主要的问题：</p><ol><li>前端修复：</li></ol><ul><li>修正了DOM元素ID的不匹配</li><li>改进了事件监听器的绑定</li><li>优化了轨迹查看器的初始化和渲染</li><li>添加了视图控制按钮</li></ul><ol start="2"><li>后端修复：<ul><li>完善了服务器配置，使用绝对路径和启用CORS</li></ul></li></ol><ul><li>添加了更多的系统状态信息</li><li>实现了所有必要的命令处理（start、stop、pause、resume、home、setFeedRate）</li><li>添加了文件上传后的轨迹生成</li></ul><ol start="3"><li>其他改进：</li></ol><ul><li>添加了更好的错误处理</li><li>改进了状态更新的逻辑</li><li>优化了代码结构</li></ul><p>现在web界面的功能应该可以正常工作了。如果你遇到任何问题，请告诉我。</p></blockquote><p>消耗了大概 300 Flow 后，完成了文件上传、模拟轨迹绘制功能</p><h3 id="3-9-界面调整"><a href="#3-9-界面调整" class="headerlink" title="3.9 界面调整"></a>3.9 界面调整</h3><p>由于第一版的界面太简陋，所以找了一个 CNC 界面让其进行模仿，这个是修改后的结果：</p><p>引入了 Three 进行三维轨迹绘制，调整了界面中按钮、布局等内容（功能都是空的）</p><p>实测可以生成输入的刀路的轨迹，这里是颇为惊喜的</p><p>此处主要花了很多时间在反复的调试效果，大概消耗了 300 Flow</p><p><img src="http://raw.gitmirror.com/lusipad/imgur/main/img/image-20250302015222450.png" alt="image-20250302015222450"></p><h3 id="3-10-文件上传"><a href="#3-10-文件上传" class="headerlink" title="3.10 文件上传"></a>3.10 文件上传</h3><p>接下里就开始不给力了，一个文件上传功能，在主页中反复失败，不管怎么调整都没用；但是让他在一个单独页面做就没有问题。<strong>主页已经很大了，看来 AI 在处理大型的情况，能力下降了</strong></p><p>最终 AI 通过重写主页来解决了这个问题。</p><p>但是后面调整其他功能的时候，也出现了该功能失灵时不灵的情况！</p><p>反复处理，消耗了大概 300 Flow</p><h3 id="3-11-状态显示"><a href="#3-11-状态显示" class="headerlink" title="3.11 状态显示"></a>3.11 状态显示</h3><p>此时界面显示的状态都不是实时的，所以需要让其和 C++ 后端联系起来。</p><p>此处大概消耗了 300 Flow，但是还是没完成（中间版本的时候可用，后续又被其改坏了）</p><h3 id="3-12-真实轨迹绘制"><a href="#3-12-真实轨迹绘制" class="headerlink" title="3.12 真实轨迹绘制"></a>3.12 真实轨迹绘制</h3><p>之前项目中的轨迹是假的，是由 C++ 后端生成的假数据，此时计划接入到真实的解析、规划、插补来绘制轨迹。</p><p>在经过 N 轮沟通，消耗了超过 500 Flow 后，仍然没有能够绘制出轨迹。由于 Pro 会员的已经用完了，暂时告一段落，先将进度记录下来。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>虽然本次开发最终未能达到期望的效果，但是对于 AI 的能力边界有了一个初步的认知：模块级别。从验证的结果来看，大部分单模块的开发都可以做得比较好，而跨模块或者上下文变长，就很难处理，反复验证也是失败告终。所以我们在使用 AI 进行项目开发的时候，还是以逐步分解，将其限制到模块级更加合适。</p><p>个人主观打分的话：</p><ul><li>需求分析能力 9</li><li>项目规划能力 8</li><li>工程能力 6<ul><li>CMake 项目构建和使用 5</li><li>web 项目 8</li></ul></li><li>开发能力 8<ul><li>C++ 模块开发 8</li><li>C++ 单元测试 7</li><li>小型 web 开发 10</li><li>大型 web 开发 6</li></ul></li><li>调试能力<ul><li>Lint 处理 10</li><li>编译错误处理 9</li><li>功能调试 3</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>AI</tag>
      
      <tag>前端</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trae 新版本来了，支持 claude-3.7</title>
    <link href="/2025/03/01/trae-support-claude-3-7/"/>
    <url>/2025/03/01/trae-support-claude-3-7/</url>
    
    <content type="html"><![CDATA[<h1 id="Trae-新版本来了，支持-claude-3-7"><a href="#Trae-新版本来了，支持-claude-3-7" class="headerlink" title="Trae 新版本来了，支持 claude-3.7"></a>Trae 新版本来了，支持 claude-3.7</h1><p><img src="https://raw.githubusercontent.com/lusipad/imgur/main/img/image-20250301235307890.png" alt="image-20250301235307890"></p><p>现在模型只能选择 claude 的了，之前版本还有 GPT-4O 的..</p><p><img src="https://raw.githubusercontent.com/lusipad/imgur/main/img/image-20250301235432739.png" alt="image-20250301235432739"></p><p>但是实测下来，同样的模型，就是不如 windsurf，更遑论 cursor 了。</p><p><img src="https://raw.githubusercontent.com/lusipad/imgur/main/img/image-20250302000115418.png" alt="image-20250302000115418"></p><p>而且还时不时需要排队。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL 编译 linuxcnc (Debian / Ubuntu)</title>
    <link href="/2024/03/14/install-linuxcnc-in-wsl/"/>
    <url>/2024/03/14/install-linuxcnc-in-wsl/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL-编译-linuxcnc-Debian-Ubuntu"><a href="#WSL-编译-linuxcnc-Debian-Ubuntu" class="headerlink" title="WSL 编译 linuxcnc (Debian &#x2F; Ubuntu)"></a>WSL 编译 linuxcnc (Debian &#x2F; Ubuntu)</h1><p>验证下来 Debian 和 Ubuntu 都可以使用 (未开启实时补丁的情况下，会在非实时环境运行), 但是 GUI 部分，Ubuntu 和 WSL 的集成度更高。</p><p><strong>如果只是简单的使用和调试，个人推荐使用 Ubuntu</strong></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h2><ol><li><p>开启 WSL</p><p> 控制面板 - 程序和功能 - 启用或关闭 Windows 功能 - 适用于 Linux 的 Windows 子系统</p><p> 在 Windows 11 中，默认就是 WSL2, 所以下文都是基于 WSL2 的</p><p> 记得在 Powershell 中先更新下 wsl</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--update</span><br>wsl <span class="hljs-literal">--shutdown</span><br></code></pre></td></tr></table></figure></li><li><p>安装 debian 或者 Ubuntu</p><p> 在 microsoft store 里下载和安装 debian 或者 Ubuntu</p></li><li><p>换源</p><p> <strong>Ubuntu 可以不用换，默认源速度也还可以</strong></p><p> debian 默认使用的是欧洲的一个 CDN, 所以速度特别慢，直接换下镜像源</p><p> 修改方法：</p><p> <code>sudo vi /etc/apt/sources.list</code></p><p> 将内容修改为</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian bookworm main<br>deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian bookworm-updates main<br>deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian-security bookworm-security main<br>deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian bookworm-backports main<br></code></pre></td></tr></table></figure><blockquote><p>[Tips]</p><p>debian 里的 vi 是个不完整的，所以输入上下之类的会有 ^B 这种转义符，</p><p>所以可以考虑直接 dd 全删了，然后 i 再复制上去，:wq 保存</p></blockquote><p> source 下，或者直接重启下 debian 生效</p></li><li><p>获取 linuxcnc 的源码和编译</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install git<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span><br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-gi<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-gi-cairo<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-pip<br><br>git clone https://github.<span class="hljs-keyword">com</span>/LinuxCNC/linuxcnc.git linuxcnc-dev<br><span class="hljs-keyword">cd</span> linuxcnc-dev<br>./debian/configure<br>sudo apt-<span class="hljs-built_in">get</span> build-dep .<br><br><span class="hljs-keyword">cd</span> src<br>./autogen.<span class="hljs-keyword">sh</span><br>./configure --with-realtime=uspace<br><span class="hljs-keyword">make</span><br>sudo <span class="hljs-keyword">make</span> setuid<br></code></pre></td></tr></table></figure><p> 如果网络顺畅，整个过程大概在 20~30 分钟</p><blockquote><p>[Tips]</p><p>如果网络不顺畅，比如从 github 拉源码一直失败，可以考虑挂代理</p><p>以 Clash for windows 为例，</p><ol><li>在 windows 本机开启 Allow Lan</li><li>在 debian 使用 <code>cat /etc/resolv.conf</code> 查看 dns</li><li>在 debian 设置代理</li></ol><p><code>export ALL_PROXY=&quot;http://172.24.176.1:7890&quot;</code></p></blockquote></li><li><p>运行 linuxcnc</p><p> 安装 python 界面库的依赖</p> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Debian]</span> pip install pyopengl --<span class="hljs-keyword">break</span>-system-packages<br><span class="hljs-string">[Ubuntu]</span> pip install pyopengl<br></code></pre></td></tr></table></figure><p> 启动 linux cnc</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> ..<span class="hljs-regexp">/scripts/</span>rip-environment<br>linuxcnc<br></code></pre></td></tr></table></figure><p> 这个时候就会启动带界面的 linuxcnc</p></li></ol><p><img src="http://raw.githubusercontent.com/lusipad/imgur/main/img/image.png" alt="linux_cnc"></p><p><strong>对于 Ubuntu, 已经可以正常使用了.</strong></p><p><strong>但是 Debian, 会出现界面花屏的情况.</strong></p><h3 id="使用-XLanuch-仅针对-Debian"><a href="#使用-XLanuch-仅针对-Debian" class="headerlink" title="使用 XLanuch (仅针对 Debian)"></a><strong>使用 XLanuch (仅针对 Debian)</strong></h3><ol><li><p>在 windows 下载和安装 <a href="https://github.com/marchaesen/vcxsrv/releases/tag/21.1.10">Release 21.1.10 · marchaesen&#x2F;vcxsrv (github.com)</a></p></li><li><p>开启 XLaunch</p></li><li><p>在 debian 启动 linuxcnc</p><p> <code>linuxcnc</code></p><p> 就会弹出 linuxcnc 的 GUI 界面</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><ol><li><a href="https://linuxcnc.org/docs/html/code/building-linuxcnc.html">Building LinuxCNC</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数控</tag>
      
      <tag>linuxcnc</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又到一年年底时</title>
    <link href="/2023/12/17/end-of-year-2023/"/>
    <url>/2023/12/17/end-of-year-2023/</url>
    
    <content type="html"><![CDATA[<h1 id="又要一年年底时"><a href="#又要一年年底时" class="headerlink" title="又要一年年底时"></a>又要一年年底时</h1><p>前几天还是二十多度的气温, 一夜之间就掉到了零下, 冬天来得悄无声息.</p><p>原本还想着周末去公司看看代码 Review, 被这天气直接劝退了, 被窝兽太强, 我被打得节节败退.</p><p>又到了一年年底总结的时候.</p><ul><li><p>项目总结</p><p>维护项目今年整体在计划内, 维护得也还行;</p><p>新项目有点方案和目标上的不确定, 所以导致了反复的摇摆, 在方案和进度上都不是特别有效.</p></li><li><p>技术能力提升</p><p>技术能力方面, 在架构上是有所进步的, 主要一个转变是看待问题的思路有了变化, 更多的是将”一次性做完美”变成了”渐进明细, 多次迭代”的思路, 并且将大目标先提前达成一致</p><p>在具体的开发技术上, 没有太大的进步, 甚至我觉得有点退步. 新技术, 合适的方法论</p></li><li><p>团队合作</p></li><li><p>解决问题的能力</p></li><li><p>自我管理</p></li><li><p>反思和反馈</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 的一些面试的想法</title>
    <link href="/2023/11/28/CppInterview/"/>
    <url>/2023/11/28/CppInterview/</url>
    
    <content type="html"><![CDATA[<h1 id="C-的一些面试的想法"><a href="#C-的一些面试的想法" class="headerlink" title="C++ 的一些面试的想法"></a>C++ 的一些面试的想法</h1><p>因为本身面试 C++ 的开发也蛮多了, 所以很多时候, 我觉得人和人之间的差异还是非常大的.</p><p>比较典型的有几种:</p><ul><li>混日子, 用了 N 年的 C++, 深度也没有, 广度也没有, 就像了修楼修了十年还是但是只会搬个砖和个水泥, 其他啥都不知道也不去了解, 干了十年就和三年水平没啥区别</li><li>只限于用, 对常用的库, 一些语言的细节都比较了解了, 但是应用起来就像是乡下的土法堆房, 不搭地基, 不搞设计, 主打一个莽字, 盖个三楼可以盖个三十楼必塌</li><li>有思考, 有的人靠”顿悟”, 有的人靠触类旁通, 有的人靠系统学习, 但是到了这一步, 就会明白造房子是目的, 设计是搭框架打地基, 语言是实现的细节, 但是真正行动的时候, 要么想太多, 要么想太少, 往往会在缺乏设计和过度设计中反复横跳</li><li>知行合一, 思考, 技术, 眼界能匹配上</li></ul><p>我觉得大抵就以上几种会比较多一些, 大家也都是过来人, 如果不去主动思考, 随波逐流的话, 很多人就止步于 2&#x2F;3 了. 对我而言, 需要的队友:</p><ul><li>结果能力 (只有落地的才是有价值的, 不管经历再完美, 没有将个人能力体现, 也是白搭)</li><li>自我管理 (只有自驱的人才能真正的成长起来)</li><li>学习能力 (能够适应变化, 能够迁移自己的能力和优势)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CppRoadmap</title>
    <link href="/2023/11/28/CppRoadmap/"/>
    <url>/2023/11/28/CppRoadmap/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Roadmap"><a href="#C-Roadmap" class="headerlink" title="C++ Roadmap"></a>C++ Roadmap</h1><p>在今年 3 月份的时候, 为了 给组内做一个 C++ 的教学, 所以我翻了许多的资料, 后来觉得 <a href="https://github.com/salmer/CppDeveloperRoadmap">salmer&#x2F;CppDeveloperRoadmap</a> 这个开源项目深得我心, 所以将其翻译成了中文, 并且相关的 commit 都已经 merge 到该项目了. (消失了小半年了, 还欠着人家一个 CN 的思维导图没画, 我有罪 233333)</p><p>现在回过头来, 我觉得自己这些年也比较懈怠了, 所以想要在后续的时间内, 将这一些 Point 都真正的展开起来, 并且将其和自己的工作能够结合起来, 而避免只是停留在喊喊口号上, 真正能够做到知行合一.</p><p>加油!</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 工博会</title>
    <link href="/2023/10/06/2023-ciff-expo/"/>
    <url>/2023/10/06/2023-ciff-expo/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-工博会-草稿"><a href="#2023-工博会-草稿" class="headerlink" title="2023 工博会 (草稿)"></a>2023 工博会 (草稿)</h1><p>本次工博会, 还是本着 CNC 和 PLC 去看的, 了解下行业的发展趋势, 以及了解下一些竞品的发展情况.</p><blockquote><p>以“聚焦数字化转型· 共建产业新生态”为主题，以“5G+ 工业互联网”、“工业软件&amp; 操作系统”及“数字化供应链”领域为3 个发展重点，同步关注“工业元宇宙”、“集成电路”、“新一代存储”等3 个热议话题，推动量子信息、5G、物联网、边缘计算、数字孪生、AI、标识解析、增材制造等前沿科技与泛制造业生态融合，推动行业企业与合作伙伴共赢，通过展览展示、高峰论坛、精准对接、媒体访谈、直播互动等形式，探索“数字工业可持续发展”为目标的国家级国际化的展会生态。</p></blockquote><p>这个是工博会官方的本次宣传主题, 会上也是包含了很多的内容, 包括了自动化&#x2F;机床&#x2F;新能源等不同的版块, 其中最热门的还是自动化和机器人, 包括西门子, Beckhoff, Fanuc 等一众大厂都有展台.</p><p>由于没有太多准备, 所以只能走马观花看下, 记个流水账了.</p><p>自动化展, 我感觉主要的发力点都在物联网, 边缘计算, 行业解决方案为主.</p><h2 id="西门子"><a href="#西门子" class="headerlink" title="西门子"></a>西门子</h2><p>西门子今年拿出来主推的, 是他们家的 <a href="https://www.siemens.com/cn/zh/products/xcelerator.html">Xcelerator开放式数字商业平台</a>, 包括了三个部分</p><ul><li><p>业务组合</p><p>基于标准 API 构建的软件, 服务以及物联网硬件的精选模块化业务组合</p></li><li><p>生态系统</p><p><strong>不断发展</strong>的认证合作伙伴生态体系，从科技巨头到独立的软件供应商。</p></li><li><p>MarketPlace</p><p><strong>不断发展</strong>的认证合作伙伴生态体系，从科技巨头到独立的软件供应商。</p></li></ul><p>这个应该就是今年他们进博会上展示的, <strong>定制开发</strong>的解决方案了.</p><p>在现场有展示了十来个基于 xcelerator 的应用场景和解决方案, 包括电力, 楼宇, 医疗等不同的行业, 和现场的工作人员聊了下, 大概目前 80% 的还是他们自己做的, 有 20% 的是合作厂商做的(一些合作的都是十人以内的小团队)</p><p>主要面向的是 <strong>Low Code</strong> 开发的, 我觉得后面需要好好分析下他们的一个解决思路.</p><h2 id="Fanuc"><a href="#Fanuc" class="headerlink" title="Fanuc"></a>Fanuc</h2><p>Fanuc 作为老牌的数控厂商, 这次还是照例带着他们家的机器人来参展了, 这块不是很懂, 所以也看不出个所以然来.</p><p>还有北京 Fanuc 搞了一套激光行业的数控定制, 可能需要分析下是不是有什么新的亮点了.</p><h2 id="rexroth"><a href="#rexroth" class="headerlink" title="rexroth"></a>rexroth</h2><p>是博世(bosch) 的控制厂商, 他们家展示的也是解决方案.</p><p>不过从我的角度来看, 就是他们自己搞了一套类似 PLC 的功能控制, 然后在此基础上做了一些 App, 带了一些花里胡哨的界面.</p><h2 id="倍加福"><a href="#倍加福" class="headerlink" title="倍加福"></a>倍加福</h2><p>各种传感器+解决方案</p><h2 id="Phoenix"><a href="#Phoenix" class="headerlink" title="Phoenix"></a>Phoenix</h2><p>老牌的 PLC 厂商了, 这次主要是给行业解决方案展示的, 包括 pcb, 汽车, 光储, 供电.. 甚至现场还卖起了无线充电宝.</p><p>同时带来了他们之前收购的 PLCNext, 基于容器的 PLC 控制系统, 可以在 windows 上使用, 不过不清楚性能如何了. 这个后面要好好分析下.</p><h2 id="布加莱"><a href="#布加莱" class="headerlink" title="布加莱"></a>布加莱</h2><p>精准自动化 安全 高速相机 工厂自动化 (管控监维)</p><h2 id="欧姆龙"><a href="#欧姆龙" class="headerlink" title="欧姆龙"></a>欧姆龙</h2><p>人力协作 高速检测 </p><h2 id="松下"><a href="#松下" class="headerlink" title="松下"></a>松下</h2><p>主要展示了一些 CNC, PLC 的解决方案, 看上去没有特别强的竞争力.</p><h2 id="施耐德"><a href="#施耐德" class="headerlink" title="施耐德"></a>施耐德</h2><p>主要是电气为主, 没有介绍他们家的 PLC.</p><h2 id="三菱"><a href="#三菱" class="headerlink" title="三菱"></a>三菱</h2><p>主要是电机介绍, 也没有介绍他们家的 CNC.</p><h2 id="汇川"><a href="#汇川" class="headerlink" title="汇川"></a>汇川</h2><p>这次野心很大, 安全, 边缘, 视觉, 机器人都带出来了</p><h2 id="台达"><a href="#台达" class="headerlink" title="台达"></a>台达</h2><p>台达这次带来了他们的 CNC, 虽然目前来看还落后于业界, 功能也比较少, 但是这显然是一个不会的信号</p><p>一些国内的</p><h2 id="繁易"><a href="#繁易" class="headerlink" title="繁易"></a>繁易</h2><p>plc控制</p><h2 id="零点"><a href="#零点" class="headerlink" title="零点"></a>零点</h2><p>带了一套 61499 的 PLC 解决方案, 不过和他们聊下来, 这个西门子有, 但是国内主流厂商用的不多</p><h2 id="雷赛科技"><a href="#雷赛科技" class="headerlink" title="雷赛科技"></a>雷赛科技</h2><p>控制卡</p><h2 id="步科"><a href="#步科" class="headerlink" title="步科"></a>步科</h2><p>界面 伺服</p>]]></content>
    
    
    <categories>
      
      <category>数控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数控</tag>
      
      <tag>工博会</tag>
      
      <tag>CNC</tag>
      
      <tag>PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试下加密功能</title>
    <link href="/2023/10/06/test-encrypt/"/>
    <url>/2023/10/06/test-encrypt/</url>
    
    <content type="html"><![CDATA[<h2 id="测试下加密功能"><a href="#测试下加密功能" class="headerlink" title="测试下加密功能"></a>测试下加密功能</h2><p>测试了下 <strong>hexo-blog-encrypt</strong> 插件, 但是发现个问题, 就是输入回车没有反应</p><p>所以最终还是删了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/01/hello-world/"/>
    <url>/2023/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-Syntax-Test"><a href="#Markdown-Syntax-Test" class="headerlink" title="Markdown Syntax Test"></a>Markdown Syntax Test</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href="http://daringfireball.net/">Daring Fireball</a>; the original guideline is <a href="http://daringfireball.net/projects/markdown/syntax">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using [GitHub Flavored Markdown][GFM].</p><p>[toc]</p><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraph-and-line-breaks"><a href="#Paragraph-and-line-breaks" class="headerlink" title="Paragraph and line breaks"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p><p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p><h3 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h3><p>Headings use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to heading levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># This is an H1</span><br><br><span class="hljs-section">## This is an H2</span><br><br><span class="hljs-section">###### This is an H6</span><br></code></pre></td></tr></table></figure><p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a heading.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; This is a blockquote with two paragraphs. This is first paragraph.</span><br><span class="hljs-quote">&gt;</span><br><span class="hljs-quote">&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><br><br><br><span class="hljs-quote">&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</span><br></code></pre></td></tr></table></figure><p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p><p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## un-ordered list</span><br><span class="hljs-bullet">*</span>   Red<br><span class="hljs-bullet">*</span>   Green<br><span class="hljs-bullet">*</span>   Blue<br><br><span class="hljs-section">## ordered list</span><br><span class="hljs-bullet">1.</span>  Red<br><span class="hljs-bullet">2.</span> Green<br><span class="hljs-bullet">3.</span>Blue<br></code></pre></td></tr></table></figure><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [ ] a task list item<br><span class="hljs-bullet">-</span> [ ] list syntax required<br><span class="hljs-bullet">-</span> [ ] normal <span class="hljs-strong">**formatting**</span>, @mentions, #1234 refs<br><span class="hljs-bullet">-</span> [ ] incomplete<br><span class="hljs-bullet">-</span> [x] completed<br></code></pre></td></tr></table></figure><p>You can change the complete&#x2F;incomplete state by clicking on the checkbox before the item.</p><h3 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p><p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gfm">Here&#x27;s an example:<br><br>```js<br>function test() &#123;<br>  console.log(&quot;notice the blank line before this function?&quot;);<br>&#125;<br>```<br><br>syntax highlighting:<br>```ruby<br>require &#x27;redcarpet&#x27;<br>markdown = Redcarpet.new(&quot;Hello World!&quot;)<br>puts markdown.to_html<br>```<br></code></pre></td></tr></table></figure><h3 id="Math-Blocks"><a href="#Math-Blocks" class="headerlink" title="Math Blocks"></a>Math Blocks</h3><p>You can render <em>LaTeX</em> mathematical expressions using <strong>MathJax</strong>.</p><p>To add a mathematical expression, input <code>$$</code> and press the ‘Return’ key. This will trigger an input field which accepts <em>Tex&#x2F;LaTex</em> source. For example:</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><p>In the markdown source file, the math block is a <em>LaTeX</em> expression wrapped by a pair of ‘$$’ marks:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125;<br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$$<br></code></pre></td></tr></table></figure><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p><p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add&#x2F;delete individual columns&#x2F;rows.</p><p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p><p>In markdown source code, they look like:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| First Header  | Second Header |<br>| ------------- | ------------- |<br>| Content Cell  | Content Cell  |<br>| Content Cell  | Content Cell  |<br></code></pre></td></tr></table></figure><p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p><p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :------------ |:---------------:| -----:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |<br></code></pre></td></tr></table></figure><p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p><h3 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">You can create footnotes like this[^footnote].<br><br>[<span class="hljs-symbol">^footnote</span>]: <span class="hljs-link">Here is the *text* of the **footnote**.</span><br></code></pre></td></tr></table></figure><p>will produce:</p><p>You can create footnotes like this[^footnote].</p><p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p><p>Hover over the ‘footnote’ superscript to see content of the footnote.</p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p><hr><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora now supports <a href="http://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p><h3 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headings from the document, and its contents are updated automatically as you add to the document.</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>](<span class="hljs-link">http://example.com/ &quot;Title&quot;</span>) inline link.<br><br>[<span class="hljs-string">This link</span>](<span class="hljs-link">http://example.net/</span>) has no title attribute.<br></code></pre></td></tr></table></figure><p>will produce:</p><p>This is <a href="http://example.com/" title="Title">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p><p><a href="http://example.net/">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headings</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><p>Command(on Windows: Ctrl) + Click <a href="#block-elements">This link</a> will jump to heading <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>][<span class="hljs-symbol">id</span>] reference-style link.<br><br>Then, anywhere in the document, you define your link label on a line by itself like this:<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://example.com/  &quot;Optional Title Here&quot;</span><br></code></pre></td></tr></table></figure><p>In Typora, they will be rendered like so:</p><p>This is [an example][id] reference-style link.</p><p>[id]: <a href="http://example.com/">http://example.com/</a>“Optional Title Here”</p><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Google</span>][<span class="hljs-symbol"></span>]<br>And then define the link:<br><br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://google.com/</span><br></code></pre></td></tr></table></figure><p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#105;&#x40;&#116;&#121;&#x70;&#111;&#x72;&#x61;&#46;&#x69;&#111;">&#105;&#x40;&#116;&#121;&#x70;&#111;&#x72;&#x61;&#46;&#x69;&#111;</a>.</p><p>Typora will also automatically link standard URLs. e.g: <a href="http://www.google.com/">www.google.com</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg</span>)<br><br>![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg &quot;Optional title&quot;</span>)<br></code></pre></td></tr></table></figure><p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p><p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p><p>You can find more details <a href="https://support.typora.io/Images/">here</a>.</p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*single asterisks*</span><br><br><span class="hljs-emphasis">_single underscores_</span><br></code></pre></td></tr></table></figure><p>output:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p><blockquote><p>wow_great_stuff</p><p>do_this_and_do_that_and_another_thing.</p></blockquote><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*this text is surrounded by literal asterisks\*</span><br></code></pre></td></tr></table></figure><p>Typora recommends using the <code>*</code> symbol.</p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**double asterisks**</span><br><br><span class="hljs-strong">__double underscores__</span><br></code></pre></td></tr></table></figure><p>output:</p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>Typora recommends using the <code>**</code> symbol.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (&#96;). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Use the <span class="hljs-code">`printf()`</span> function.<br></code></pre></td></tr></table></figure><p>will produce:</p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-smile"><a href="#Emoji-smile" class="headerlink" title="Emoji :smile:"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p><p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\lim_&#123;x \to \infty&#125; \exp(-x) = 0$</code> will be rendered as LaTeX command.</p><p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code>&#x2F;</p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;265&#x27;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;Fancy Animated SVG Menu&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">allowtransparency</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 100%;&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx.mp4&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><p>You can find more details <a href="https://support.typora.io/HTML/">here</a>.</p><h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><pre><code class=" mermaid">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;</code></pre><pre><code class=" mermaid">sequenceDiagram    participant Alice    participant Bob    Alice-&gt;&gt;John: Hello John, how are you?    loop Healthcheck        John-&gt;&gt;John: Fight against hypochondria    end    Note right of John: Rational thoughts &lt;br/&gt;prevail!    John--&gt;&gt;Alice: Great!    John-&gt;&gt;Bob: How about you?    Bob--&gt;&gt;John: Jolly good!</code></pre><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidexcludes weekdays 2014-01-10section A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
