<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>trae_support_claude_3.7</title>
    <link href="/2025/03/01/trae-support-claude-3-7/"/>
    <url>/2025/03/01/trae-support-claude-3-7/</url>
    
    <content type="html"><![CDATA[<h1 id="Trae-新版本来了，支持-claude-3-7"><a href="#Trae-新版本来了，支持-claude-3-7" class="headerlink" title="Trae 新版本来了，支持 claude-3.7"></a>Trae 新版本来了，支持 claude-3.7</h1><p><img src="https://raw.githubusercontent.com/lusipad/imgur/main/img/image-20250301235307890.png" alt="image-20250301235307890"></p><p>现在模型只能选择 claude 的了，之前版本还有 GPT-4O 的..</p><p><img src="https://raw.githubusercontent.com/lusipad/imgur/main/img/image-20250301235432739.png" alt="image-20250301235432739"></p><p>但是实测下来，同样的模型，就是不如 windsurf，更遑论 cursor 了。</p><p><img src="https://raw.githubusercontent.com/lusipad/imgur/main/img/image-20250302000115418.png" alt="image-20250302000115418"></p><p>而且还时不时需要排队。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/14/hello-world/"/>
    <url>/2024/12/14/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-Syntax-Test"><a href="#Markdown-Syntax-Test" class="headerlink" title="Markdown Syntax Test"></a>Markdown Syntax Test</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href="http://daringfireball.net/">Daring Fireball</a>; the original guideline is <a href="http://daringfireball.net/projects/markdown/syntax">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using [GitHub Flavored Markdown][GFM].</p><p>[toc]</p><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraph-and-line-breaks"><a href="#Paragraph-and-line-breaks" class="headerlink" title="Paragraph and line breaks"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p><p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p><h3 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h3><p>Headings use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to heading levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># This is an H1</span><br><br><span class="hljs-section">## This is an H2</span><br><br><span class="hljs-section">###### This is an H6</span><br></code></pre></td></tr></table></figure><p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a heading.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; This is a blockquote with two paragraphs. This is first paragraph.</span><br><span class="hljs-quote">&gt;</span><br><span class="hljs-quote">&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><br><br><br><span class="hljs-quote">&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</span><br></code></pre></td></tr></table></figure><p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p><p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## un-ordered list</span><br><span class="hljs-bullet">*</span>   Red<br><span class="hljs-bullet">*</span>   Green<br><span class="hljs-bullet">*</span>   Blue<br><br><span class="hljs-section">## ordered list</span><br><span class="hljs-bullet">1.</span>  Red<br><span class="hljs-bullet">2.</span> Green<br><span class="hljs-bullet">3.</span>Blue<br></code></pre></td></tr></table></figure><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [ ] a task list item<br><span class="hljs-bullet">-</span> [ ] list syntax required<br><span class="hljs-bullet">-</span> [ ] normal <span class="hljs-strong">**formatting**</span>, @mentions, #1234 refs<br><span class="hljs-bullet">-</span> [ ] incomplete<br><span class="hljs-bullet">-</span> [x] completed<br></code></pre></td></tr></table></figure><p>You can change the complete&#x2F;incomplete state by clicking on the checkbox before the item.</p><h3 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p><p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gfm">Here&#x27;s an example:<br><br>```js<br>function test() &#123;<br>  console.log(&quot;notice the blank line before this function?&quot;);<br>&#125;<br>```<br><br>syntax highlighting:<br>```ruby<br>require &#x27;redcarpet&#x27;<br>markdown = Redcarpet.new(&quot;Hello World!&quot;)<br>puts markdown.to_html<br>```<br></code></pre></td></tr></table></figure><h3 id="Math-Blocks"><a href="#Math-Blocks" class="headerlink" title="Math Blocks"></a>Math Blocks</h3><p>You can render <em>LaTeX</em> mathematical expressions using <strong>MathJax</strong>.</p><p>To add a mathematical expression, input <code>$$</code> and press the ‘Return’ key. This will trigger an input field which accepts <em>Tex&#x2F;LaTex</em> source. For example:</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><p>In the markdown source file, the math block is a <em>LaTeX</em> expression wrapped by a pair of ‘$$’ marks:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125;<br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$$<br></code></pre></td></tr></table></figure><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p><p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add&#x2F;delete individual columns&#x2F;rows.</p><p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p><p>In markdown source code, they look like:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| First Header  | Second Header |<br>| ------------- | ------------- |<br>| Content Cell  | Content Cell  |<br>| Content Cell  | Content Cell  |<br></code></pre></td></tr></table></figure><p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p><p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :------------ |:---------------:| -----:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |<br></code></pre></td></tr></table></figure><p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p><h3 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">You can create footnotes like this[^footnote].<br><br>[<span class="hljs-symbol">^footnote</span>]: <span class="hljs-link">Here is the *text* of the **footnote**.</span><br></code></pre></td></tr></table></figure><p>will produce:</p><p>You can create footnotes like this[^footnote].</p><p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p><p>Hover over the ‘footnote’ superscript to see content of the footnote.</p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p><hr><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora now supports <a href="http://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p><h3 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headings from the document, and its contents are updated automatically as you add to the document.</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>](<span class="hljs-link">http://example.com/ &quot;Title&quot;</span>) inline link.<br><br>[<span class="hljs-string">This link</span>](<span class="hljs-link">http://example.net/</span>) has no title attribute.<br></code></pre></td></tr></table></figure><p>will produce:</p><p>This is <a href="http://example.com/" title="Title">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p><p><a href="http://example.net/">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headings</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><p>Command(on Windows: Ctrl) + Click <a href="#block-elements">This link</a> will jump to heading <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>][<span class="hljs-symbol">id</span>] reference-style link.<br><br>Then, anywhere in the document, you define your link label on a line by itself like this:<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://example.com/  &quot;Optional Title Here&quot;</span><br></code></pre></td></tr></table></figure><p>In Typora, they will be rendered like so:</p><p>This is [an example][id] reference-style link.</p><p>[id]: <a href="http://example.com/">http://example.com/</a>“Optional Title Here”</p><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Google</span>][<span class="hljs-symbol"></span>]<br>And then define the link:<br><br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://google.com/</span><br></code></pre></td></tr></table></figure><p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#105;&#x40;&#116;&#x79;&#112;&#x6f;&#114;&#x61;&#x2e;&#x69;&#111;">&#105;&#x40;&#116;&#x79;&#112;&#x6f;&#114;&#x61;&#x2e;&#x69;&#111;</a>.</p><p>Typora will also automatically link standard URLs. e.g: <a href="http://www.google.com/">www.google.com</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg</span>)<br><br>![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg &quot;Optional title&quot;</span>)<br></code></pre></td></tr></table></figure><p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p><p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p><p>You can find more details <a href="https://support.typora.io/Images/">here</a>.</p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*single asterisks*</span><br><br><span class="hljs-emphasis">_single underscores_</span><br></code></pre></td></tr></table></figure><p>output:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p><blockquote><p>wow_great_stuff</p><p>do_this_and_do_that_and_another_thing.</p></blockquote><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*this text is surrounded by literal asterisks\*</span><br></code></pre></td></tr></table></figure><p>Typora recommends using the <code>*</code> symbol.</p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**double asterisks**</span><br><br><span class="hljs-strong">__double underscores__</span><br></code></pre></td></tr></table></figure><p>output:</p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>Typora recommends using the <code>**</code> symbol.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (&#96;). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Use the <span class="hljs-code">`printf()`</span> function.<br></code></pre></td></tr></table></figure><p>will produce:</p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-smile"><a href="#Emoji-smile" class="headerlink" title="Emoji :smile:"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p><p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\lim_&#123;x \to \infty&#125; \exp(-x) = 0$</code> will be rendered as LaTeX command.</p><p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code>&#x2F;</p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;265&#x27;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;Fancy Animated SVG Menu&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">allowtransparency</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 100%;&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx.mp4&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><p>You can find more details <a href="https://support.typora.io/HTML/">here</a>.</p><h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><pre><code class=" mermaid">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;</code></pre><pre><code class=" mermaid">sequenceDiagram    participant Alice    participant Bob    Alice-&gt;&gt;John: Hello John, how are you?    loop Healthcheck        John-&gt;&gt;John: Fight against hypochondria    end    Note right of John: Rational thoughts &lt;br/&gt;prevail!    John--&gt;&gt;Alice: Great!    John-&gt;&gt;Bob: How about you?    Bob--&gt;&gt;John: Jolly good!</code></pre><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidexcludes weekdays 2014-01-10section A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WSL 编译 linuxcnc (Debian / Ubuntu)</title>
    <link href="/2024/03/14/install-linuxcnc-in-wsl/"/>
    <url>/2024/03/14/install-linuxcnc-in-wsl/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL-编译-linuxcnc-Debian-Ubuntu"><a href="#WSL-编译-linuxcnc-Debian-Ubuntu" class="headerlink" title="WSL 编译 linuxcnc (Debian &#x2F; Ubuntu)"></a>WSL 编译 linuxcnc (Debian &#x2F; Ubuntu)</h1><p>验证下来 Debian 和 Ubuntu 都可以使用 (未开启实时补丁的情况下，会在非实时环境运行), 但是 GUI 部分，Ubuntu 和 WSL 的集成度更高。</p><p><strong>如果只是简单的使用和调试，个人推荐使用 Ubuntu</strong></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h2><ol><li><p>开启 WSL</p><p> 控制面板 - 程序和功能 - 启用或关闭 Windows 功能 - 适用于 Linux 的 Windows 子系统</p><p> 在 Windows 11 中，默认就是 WSL2, 所以下文都是基于 WSL2 的</p><p> 记得在 Powershell 中先更新下 wsl</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--update</span><br>wsl <span class="hljs-literal">--shutdown</span><br></code></pre></td></tr></table></figure></li><li><p>安装 debian 或者 Ubuntu</p><p> 在 microsoft store 里下载和安装 debian 或者 Ubuntu</p></li><li><p>换源</p><p> <strong>Ubuntu 可以不用换，默认源速度也还可以</strong></p><p> debian 默认使用的是欧洲的一个 CDN, 所以速度特别慢，直接换下镜像源</p><p> 修改方法：</p><p> <code>sudo vi /etc/apt/sources.list</code></p><p> 将内容修改为</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian bookworm main<br>deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian bookworm-updates main<br>deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian-security bookworm-security main<br>deb http:<span class="hljs-regexp">//mi</span>rror.nju.edu.cn/debian bookworm-backports main<br></code></pre></td></tr></table></figure><blockquote><p>[Tips]</p><p>debian 里的 vi 是个不完整的，所以输入上下之类的会有 ^B 这种转义符，</p><p>所以可以考虑直接 dd 全删了，然后 i 再复制上去，:wq 保存</p></blockquote><p> source 下，或者直接重启下 debian 生效</p></li><li><p>获取 linuxcnc 的源码和编译</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install git<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span><br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-gi<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-gi-cairo<br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python3</span>-pip<br><br>git clone https://github.<span class="hljs-keyword">com</span>/LinuxCNC/linuxcnc.git linuxcnc-dev<br><span class="hljs-keyword">cd</span> linuxcnc-dev<br>./debian/configure<br>sudo apt-<span class="hljs-built_in">get</span> build-dep .<br><br><span class="hljs-keyword">cd</span> src<br>./autogen.<span class="hljs-keyword">sh</span><br>./configure --with-realtime=uspace<br><span class="hljs-keyword">make</span><br>sudo <span class="hljs-keyword">make</span> setuid<br></code></pre></td></tr></table></figure><p> 如果网络顺畅，整个过程大概在 20~30 分钟</p><blockquote><p>[Tips]</p><p>如果网络不顺畅，比如从 github 拉源码一直失败，可以考虑挂代理</p><p>以 Clash for windows 为例，</p><ol><li>在 windows 本机开启 Allow Lan</li><li>在 debian 使用 <code>cat /etc/resolv.conf</code> 查看 dns</li><li>在 debian 设置代理</li></ol><p><code>export ALL_PROXY=&quot;http://172.24.176.1:7890&quot;</code></p></blockquote></li><li><p>运行 linuxcnc</p><p> 安装 python 界面库的依赖</p> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Debian]</span> pip install pyopengl --<span class="hljs-keyword">break</span>-system-packages<br><span class="hljs-string">[Ubuntu]</span> pip install pyopengl<br></code></pre></td></tr></table></figure><p> 启动 linux cnc</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> ..<span class="hljs-regexp">/scripts/</span>rip-environment<br>linuxcnc<br></code></pre></td></tr></table></figure><p> 这个时候就会启动带界面的 linuxcnc</p></li></ol><p><img src="http://raw.githubusercontent.com/lusipad/imgur/main/img/image.png" alt="linux_cnc"></p><pre><code class="hljs">**对于 Ubuntu, 已经可以正常使用了.****但是 Debian, 会出现界面花屏的情况.**### **使用 XLanuch (仅针对 Debian)**1. 在 windows 下载和安装 [Release 21.1.10 · marchaesen/vcxsrv (github.com)](https://github.com/marchaesen/vcxsrv/releases/tag/21.1.10)2. 开启 XLaunch        ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae771ec1-2ff9-49df-aa2a-d0e8e498ba26/b212ce1b-f5dc-4c92-80fc-b84fe072e6ef/Untitled.png)        ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae771ec1-2ff9-49df-aa2a-d0e8e498ba26/1b113fb2-2200-492c-ada3-c91e8fe050be/Untitled.png)</code></pre><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae771ec1-2ff9-49df-aa2a-d0e8e498ba26/dce25a00-a85f-4667-9593-7be8c7481722/Untitled.png" alt="Untitled"></p><ol><li><p>在 debian 启动 linuxcnc</p><p> <code>linuxcnc</code></p><p> 就会弹出 linuxcnc 的 GUI 界面</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><ol><li><a href="https://linuxcnc.org/docs/html/code/building-linuxcnc.html">Building LinuxCNC</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数控</tag>
      
      <tag>linuxcnc</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又到一年年底时</title>
    <link href="/2023/12/17/end-of-year-2023/"/>
    <url>/2023/12/17/end-of-year-2023/</url>
    
    <content type="html"><![CDATA[<h1 id="又要一年年底时"><a href="#又要一年年底时" class="headerlink" title="又要一年年底时"></a>又要一年年底时</h1><p>前几天还是二十多度的气温, 一夜之间就掉到了零下, 冬天来得悄无声息.</p><p>原本还想着周末去公司看看代码 Review, 被这天气直接劝退了, 被窝兽太强, 我被打得节节败退.</p><p>又到了一年年底总结的时候.</p><ul><li><p>项目总结</p><p>维护项目今年整体在计划内, 维护得也还行;</p><p>新项目有点方案和目标上的不确定, 所以导致了反复的摇摆, 在方案和进度上都不是特别有效.</p></li><li><p>技术能力提升</p><p>技术能力方面, 在架构上是有所进步的, 主要一个转变是看待问题的思路有了变化, 更多的是将”一次性做完美”变成了”渐进明细, 多次迭代”的思路, 并且将大目标先提前达成一致</p><p>在具体的开发技术上, 没有太大的进步, 甚至我觉得有点退步. 新技术, 合适的方法论</p></li><li><p>团队合作</p></li><li><p>解决问题的能力</p></li><li><p>自我管理</p></li><li><p>反思和反馈</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 的一些面试的想法</title>
    <link href="/2023/11/28/CppInterview/"/>
    <url>/2023/11/28/CppInterview/</url>
    
    <content type="html"><![CDATA[<h1 id="C-的一些面试的想法"><a href="#C-的一些面试的想法" class="headerlink" title="C++ 的一些面试的想法"></a>C++ 的一些面试的想法</h1><p>因为本身面试 C++ 的开发也蛮多了, 所以很多时候, 我觉得人和人之间的差异还是非常大的.</p><p>比较典型的有几种:</p><ul><li>混日子, 用了 N 年的 C++, 深度也没有, 广度也没有, 就像了修楼修了十年还是但是只会搬个砖和个水泥, 其他啥都不知道也不去了解, 干了十年就和三年水平没啥区别</li><li>只限于用, 对常用的库, 一些语言的细节都比较了解了, 但是应用起来就像是乡下的土法堆房, 不搭地基, 不搞设计, 主打一个莽字, 盖个三楼可以盖个三十楼必塌</li><li>有思考, 有的人靠”顿悟”, 有的人靠触类旁通, 有的人靠系统学习, 但是到了这一步, 就会明白造房子是目的, 设计是搭框架打地基, 语言是实现的细节, 但是真正行动的时候, 要么想太多, 要么想太少, 往往会在缺乏设计和过度设计中反复横跳</li><li>知行合一, 思考, 技术, 眼界能匹配上</li></ul><p>我觉得大抵就以上几种会比较多一些, 大家也都是过来人, 如果不去主动思考, 随波逐流的话, 很多人就止步于 2&#x2F;3 了. 对我而言, 需要的队友:</p><ul><li>结果能力 (只有落地的才是有价值的, 不管经历再完美, 没有将个人能力体现, 也是白搭)</li><li>自我管理 (只有自驱的人才能真正的成长起来)</li><li>学习能力 (能够适应变化, 能够迁移自己的能力和优势)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CppRoadmap</title>
    <link href="/2023/11/28/CppRoadmap/"/>
    <url>/2023/11/28/CppRoadmap/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Roadmap"><a href="#C-Roadmap" class="headerlink" title="C++ Roadmap"></a>C++ Roadmap</h1><p>在今年 3 月份的时候, 为了 给组内做一个 C++ 的教学, 所以我翻了许多的资料, 后来觉得 <a href="https://github.com/salmer/CppDeveloperRoadmap">salmer&#x2F;CppDeveloperRoadmap</a> 这个开源项目深得我心, 所以将其翻译成了中文, 并且相关的 commit 都已经 merge 到该项目了. (消失了小半年了, 还欠着人家一个 CN 的思维导图没画, 我有罪 233333)</p><p>现在回过头来, 我觉得自己这些年也比较懈怠了, 所以想要在后续的时间内, 将这一些 Point 都真正的展开起来, 并且将其和自己的工作能够结合起来, 而避免只是停留在喊喊口号上, 真正能够做到知行合一.</p><p>加油!</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 工博会</title>
    <link href="/2023/10/06/2023-ciff-expo/"/>
    <url>/2023/10/06/2023-ciff-expo/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-工博会-草稿"><a href="#2023-工博会-草稿" class="headerlink" title="2023 工博会 (草稿)"></a>2023 工博会 (草稿)</h1><p>本次工博会, 还是本着 CNC 和 PLC 去看的, 了解下行业的发展趋势, 以及了解下一些竞品的发展情况.</p><blockquote><p>以“聚焦数字化转型· 共建产业新生态”为主题，以“5G+ 工业互联网”、“工业软件&amp; 操作系统”及“数字化供应链”领域为3 个发展重点，同步关注“工业元宇宙”、“集成电路”、“新一代存储”等3 个热议话题，推动量子信息、5G、物联网、边缘计算、数字孪生、AI、标识解析、增材制造等前沿科技与泛制造业生态融合，推动行业企业与合作伙伴共赢，通过展览展示、高峰论坛、精准对接、媒体访谈、直播互动等形式，探索“数字工业可持续发展”为目标的国家级国际化的展会生态。</p></blockquote><p>这个是工博会官方的本次宣传主题, 会上也是包含了很多的内容, 包括了自动化&#x2F;机床&#x2F;新能源等不同的版块, 其中最热门的还是自动化和机器人, 包括西门子, Beckhoff, Fanuc 等一众大厂都有展台.</p><p>由于没有太多准备, 所以只能走马观花看下, 记个流水账了.</p><p>自动化展, 我感觉主要的发力点都在物联网, 边缘计算, 行业解决方案为主.</p><h2 id="西门子"><a href="#西门子" class="headerlink" title="西门子"></a>西门子</h2><p>西门子今年拿出来主推的, 是他们家的 <a href="https://www.siemens.com/cn/zh/products/xcelerator.html">Xcelerator开放式数字商业平台</a>, 包括了三个部分</p><ul><li><p>业务组合</p><p>基于标准 API 构建的软件, 服务以及物联网硬件的精选模块化业务组合</p></li><li><p>生态系统</p><p><strong>不断发展</strong>的认证合作伙伴生态体系，从科技巨头到独立的软件供应商。</p></li><li><p>MarketPlace</p><p><strong>不断发展</strong>的认证合作伙伴生态体系，从科技巨头到独立的软件供应商。</p></li></ul><p>这个应该就是今年他们进博会上展示的, <strong>定制开发</strong>的解决方案了.</p><p>在现场有展示了十来个基于 xcelerator 的应用场景和解决方案, 包括电力, 楼宇, 医疗等不同的行业, 和现场的工作人员聊了下, 大概目前 80% 的还是他们自己做的, 有 20% 的是合作厂商做的(一些合作的都是十人以内的小团队)</p><p>主要面向的是 <strong>Low Code</strong> 开发的, 我觉得后面需要好好分析下他们的一个解决思路.</p><h2 id="Fanuc"><a href="#Fanuc" class="headerlink" title="Fanuc"></a>Fanuc</h2><p>Fanuc 作为老牌的数控厂商, 这次还是照例带着他们家的机器人来参展了, 这块不是很懂, 所以也看不出个所以然来.</p><p>还有北京 Fanuc 搞了一套激光行业的数控定制, 可能需要分析下是不是有什么新的亮点了.</p><h2 id="rexroth"><a href="#rexroth" class="headerlink" title="rexroth"></a>rexroth</h2><p>是博世(bosch) 的控制厂商, 他们家展示的也是解决方案.</p><p>不过从我的角度来看, 就是他们自己搞了一套类似 PLC 的功能控制, 然后在此基础上做了一些 App, 带了一些花里胡哨的界面.</p><h2 id="倍加福"><a href="#倍加福" class="headerlink" title="倍加福"></a>倍加福</h2><p>各种传感器+解决方案</p><h2 id="Phoenix"><a href="#Phoenix" class="headerlink" title="Phoenix"></a>Phoenix</h2><p>老牌的 PLC 厂商了, 这次主要是给行业解决方案展示的, 包括 pcb, 汽车, 光储, 供电.. 甚至现场还卖起了无线充电宝.</p><p>同时带来了他们之前收购的 PLCNext, 基于容器的 PLC 控制系统, 可以在 windows 上使用, 不过不清楚性能如何了. 这个后面要好好分析下.</p><h2 id="布加莱"><a href="#布加莱" class="headerlink" title="布加莱"></a>布加莱</h2><p>精准自动化 安全 高速相机 工厂自动化 (管控监维)</p><h2 id="欧姆龙"><a href="#欧姆龙" class="headerlink" title="欧姆龙"></a>欧姆龙</h2><p>人力协作 高速检测 </p><h2 id="松下"><a href="#松下" class="headerlink" title="松下"></a>松下</h2><p>主要展示了一些 CNC, PLC 的解决方案, 看上去没有特别强的竞争力.</p><h2 id="施耐德"><a href="#施耐德" class="headerlink" title="施耐德"></a>施耐德</h2><p>主要是电气为主, 没有介绍他们家的 PLC.</p><h2 id="三菱"><a href="#三菱" class="headerlink" title="三菱"></a>三菱</h2><p>主要是电机介绍, 也没有介绍他们家的 CNC.</p><h2 id="汇川"><a href="#汇川" class="headerlink" title="汇川"></a>汇川</h2><p>这次野心很大, 安全, 边缘, 视觉, 机器人都带出来了</p><h2 id="台达"><a href="#台达" class="headerlink" title="台达"></a>台达</h2><p>台达这次带来了他们的 CNC, 虽然目前来看还落后于业界, 功能也比较少, 但是这显然是一个不会的信号</p><p>一些国内的</p><h2 id="繁易"><a href="#繁易" class="headerlink" title="繁易"></a>繁易</h2><p>plc控制</p><h2 id="零点"><a href="#零点" class="headerlink" title="零点"></a>零点</h2><p>带了一套 61499 的 PLC 解决方案, 不过和他们聊下来, 这个西门子有, 但是国内主流厂商用的不多</p><h2 id="雷赛科技"><a href="#雷赛科技" class="headerlink" title="雷赛科技"></a>雷赛科技</h2><p>控制卡</p><h2 id="步科"><a href="#步科" class="headerlink" title="步科"></a>步科</h2><p>界面 伺服</p>]]></content>
    
    
    <categories>
      
      <category>数控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数控</tag>
      
      <tag>工博会</tag>
      
      <tag>CNC</tag>
      
      <tag>PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
